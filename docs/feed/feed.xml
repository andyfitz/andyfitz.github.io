<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Andy Fitz</title>
	<subtitle>design, code, love</subtitle>
	
	<link href="https://ndftz.com/feed/feed.xml" rel="self"/>
	<link href="https://ndftz.com/"/>
	<updated>2021-04-19T00:00:00Z</updated>
	<id>https://ndftz.com/</id>
	<author>
		<name>Andy Fitzsimon</name>
		<email>andy@fitzsimon.com.au</email>
	</author>
	
	<entry>
		<title>Generative art with vanilla JS</title>
		<link href="https://ndftz.com/posts/generative-design/"/>
		<updated>2021-04-19T00:00:00Z</updated>
		<id>https://ndftz.com/posts/generative-design/</id>
		<content type="html">&lt;p&gt;Why design a single piece when you can design a visual system with countless unique permutations?&lt;/p&gt;
&lt;p&gt;In this tutorial I&#39;m going to show you how to make dynamic artwork using very simple vanilla javascript and SVG.&lt;/p&gt;
&lt;style&gt;

#nstage{cursor:pointer;}
#nstage circle {stroke: DeepPink;fill: none;stroke-width:2;}
#nstage circle:nth-child(2n) {stroke:#6ac; animation-delay:-1s; }
#nstage circle:nth-child(3n){stroke:#789;  opacity:.5;animation-delay:-2s;}
#nstage circle:nth-child(4n){stroke:#567;  opacity:.5;animation-delay:-3s;}
#nstage circle:nth-child(5n){stroke:#9ab; animation-delay:-.5s;}
#nstage circle{animation: showhide 4s ease infinite}
@keyframes showhide{50%{opacity:0}}
&lt;/style&gt;
&lt;svg id=&quot;nstage&quot; width=&quot;100%&quot; height=&quot;27em&quot; viewBox=&quot;0 0 100 100&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; style=&quot;opacity:.8;position:absolute; top:-2em; left:0; right:0; z-index:-1;&quot;&gt;
&lt;circle cx=&quot;10&quot; cy=&quot;10&quot; r=&quot;5&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;20&quot; cy=&quot;90&quot; r=&quot;4&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;30&quot; cy=&quot;40&quot; r=&quot;3&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;40&quot; cy=&quot;30&quot; r=&quot;2&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;50&quot; cy=&quot;70&quot; r=&quot;1&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;60&quot; cy=&quot;60&quot; r=&quot;6&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;70&quot; cy=&quot;30&quot; r=&quot;7&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;80&quot; cy=&quot;80&quot; r=&quot;8&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;90&quot; cy=&quot;10&quot; r=&quot;9&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
&lt;script&gt;
function eremoveAll() {
document.getElementById(&quot;nstage&quot;).innerHTML = &quot;&quot;;
}
eremoveAll();
let esvg = document.getElementById(&quot;nstage&quot;);
function edrawCircles() {
for (i = 0; i &lt; 15; i++) {
circle = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;circle&quot;);
circle.setAttribute(&quot;pathLength&quot;, &quot;1&quot;);
circle.setAttribute(&quot;stroke-width&quot;, &quot;1&quot;);
circle.setAttribute(&quot;r&quot;, Math.floor(Math.random() * 7) * 2 + 2);
circle.setAttribute(&quot;cx&quot;, Math.floor(Math.random() * 4) * 20 + 20);
circle.setAttribute(&quot;cy&quot;, Math.floor(Math.random() * 4) * 20 + 20);
esvg.appendChild(circle);
}
}
document.addEventListener(&quot;click&quot;, function () {
eremoveAll();
edrawCircles();
});
edrawCircles();
var deGenTimer = window.setInterval(function () {
eremoveAll();
edrawCircles();
}, 1000);
&lt;/script&gt;
&lt;p&gt;For generative art there are some great frameworks like &lt;a href=&quot;https://p5js.org/&quot;&gt;P5.js&lt;/a&gt;,&lt;a href=&quot;https://threejs.org/&quot;&gt;Three.js&lt;/a&gt;, all the way up to the mind bending &lt;a href=&quot;https://en.wikipedia.org/wiki/Generative_adversarial_network&quot;&gt;Generative Adversarial Networks&lt;/a&gt; like &lt;a href=&quot;https://github.com/NVlabs/stylegan&quot;&gt;styleGAN&lt;/a&gt; and so many more.  This space is exploding with digital artists and art directors chasing never seen before aesthetics that blur the lines between human and machine made creations.&lt;/p&gt;
&lt;p&gt;This isn&#39;t new either. For decades many brands with expansive portfolios have gone down the dynamic brand route with their visual architecture. We&#39;re lucky to have a few of them as customers at &lt;a href=&quot;http://outfit.io/&quot;&gt;Outfit.io&lt;/a&gt; . Traditionally however, permutations were created by central tooling. Often created on the desktop of an art director in a brand team. A render produced once per-need - manually looked over, then distributed as static assets. Nowadays, we can keep the systems alive by leveraging our web native technology and respond to new input&lt;/p&gt;
&lt;p&gt;One of the many benefits in using web formats for design, is that it&#39;s very easy to produce artwork that is unique every time. An awesome perk for end users of your visual system.&lt;br /&gt;
Plus, unlike choosing a specific tool, you have all the aesthetic potential of the web.&lt;/p&gt;
&lt;p&gt;This can make for a far more engaging and dynamic aesthetic on large builds like events or media.&lt;/p&gt;
&lt;h1 id=&quot;setting-the-stage&quot;&gt;Setting the stage &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/generative-design/#setting-the-stage&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;First, ... we&#39;re going to create something without any javascript at all.&lt;br /&gt;
This helps us to creatively set the stage by mocking up at least some of the look and feel you&#39;d like to create.&lt;/p&gt;
&lt;p&gt;The benefits of this approach means you discover your answers to the most beautiful questions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What must &lt;strong&gt;stay the same&lt;/strong&gt; so that everything else can change?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and also frees us up to explore new horizons&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Knowing what is constant the same, what can constantly change?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case we&#39;re going to use &lt;code&gt;SVG&lt;/code&gt;,  but you could just as easily use plain ol HTML and &lt;code&gt;div&lt;/code&gt;&#39;s.&lt;br /&gt;
I&#39;m not going to use &lt;code&gt;canvas&lt;/code&gt; or even SVG Filters because at the end I want a nice vector PDF poster.&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stage&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 100 100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMid slice&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- &lt;br /&gt;   our cool stuff will go here &lt;br /&gt;   --&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;preserveAspectRatio=&amp;quot;xMidYMid slice&amp;quot;&lt;/code&gt; will center-crop our artwork if we display it at non square.&lt;/p&gt;
&lt;p&gt;We should probably add some CSS to make sure we&#39;re full page too.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;body &gt; svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100vh&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, lets think about what we could create.&lt;/p&gt;
&lt;p&gt;A few random-ishly placed circles might do the trick.&lt;/p&gt;
&lt;svg viewBox=&quot;0 0 100 100&quot; fill=&quot;currentcolor&quot; width=&quot;100%&quot; height=&quot;15em&quot;&gt;
&lt;circle cx=&quot;20&quot; cy=&quot;80&quot; r=&quot;4&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;80&quot; cy=&quot;40&quot; r=&quot;4&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;40&quot; cy=&quot;40&quot; r=&quot;2&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;40&quot; cy=&quot;80&quot; r=&quot;2&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;60&quot; cy=&quot;60&quot; r=&quot;6&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;60&quot; cy=&quot;20&quot; r=&quot;6&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;20&quot; cy=&quot;60&quot; r=&quot;8&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;80&quot; cy=&quot;20&quot; r=&quot;8&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
&lt;p&gt;Not really that random... I just placed the X and Y axis in increments of 20 and the radius in sizes between 2-8.&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;60&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;60&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;60&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;60&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;what-must-stay-the-same-%3F&quot;&gt;What must stay the same ? &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/generative-design/#what-must-stay-the-same-%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;re going to apply some CSS and attributes to lock in the look we want.  In this case, pink circles with double thick lines and no fill.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; DeepPink&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;svg viewBox=&quot;0 0 100 100&quot; fill=&quot;currentcolor&quot; width=&quot;100%&quot; height=&quot;15em&quot;&gt; &lt;g style=&quot;stroke: DeepPink;fill: none;stroke-width:2;&quot;&gt;&lt;circle cx=&quot;20&quot; cy=&quot;80&quot; r=&quot;4&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;80&quot; cy=&quot;40&quot; r=&quot;4&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;40&quot; cy=&quot;40&quot; r=&quot;2&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;40&quot; cy=&quot;80&quot; r=&quot;2&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;60&quot; cy=&quot;60&quot; r=&quot;6&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;60&quot; cy=&quot;20&quot; r=&quot;6&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;20&quot; cy=&quot;60&quot; r=&quot;8&quot;&gt;&lt;/circle&gt;&lt;circle cx=&quot;80&quot; cy=&quot;20&quot; r=&quot;8&quot;&gt;&lt;/circle&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;Okay that was fun, but we need more of these, and I&#39;d go mad placing circles manually. Time to let the computers take over.&lt;/p&gt;
&lt;h1 id=&quot;enter-vanilla-javascript&quot;&gt;Enter Vanilla Javascript &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/generative-design/#enter-vanilla-javascript&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For this demo, we be messing with the three attributes of each SVG &lt;code&gt;circle&lt;/code&gt; element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the circle X position&lt;/li&gt;
&lt;li&gt;the circle Y position&lt;/li&gt;
&lt;li&gt;the radius of the circle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also want the option of changing how many circles we play with.&lt;/p&gt;
&lt;p&gt;So to accommodate this, we&#39;re going to say bye-bye to the manually crafted circles and hello to Javascript generated ones.&lt;/p&gt;
&lt;p&gt;I&#39;m going to leave them in the DOM just incase someone is using &lt;code&gt;noscript&lt;/code&gt;. But there&#39;s no need to do this if we were generating this server-side.&lt;br /&gt;
I also want a &lt;code&gt;removeAll&lt;/code&gt; function for easily testing new variations.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// clearing the stage&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&#39;re going to create entirely new circles on the stage with a function called &lt;code&gt;drawCircles&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// calling my state svg&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; svg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;drawCircles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// how many circles to draw &lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// I started with 8 but now I think 15 is the magic number&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// because circle isnt a html element I need to specify the SVG namespace &lt;/span&gt;&lt;br /&gt;    circle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElementNS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;circle&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// maximum 14, minimum 2 and in increments of 2 &lt;/span&gt;&lt;br /&gt;    circle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// minimum 20 maximum 80, incremements of 20 &lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// (so either 20 , 40, 60, 80 )&lt;/span&gt;&lt;br /&gt;    circle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cx&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    circle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// add these elements to my stage&lt;/span&gt;&lt;br /&gt;    svg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;circle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;drawCircles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mess with the values, it&#39;s super fun to see your design going off-plan.  Watching your rules bend and break can give you new ideas.&lt;/p&gt;
&lt;h2 id=&quot;testing-and-regenerating&quot;&gt;Testing and regenerating &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/generative-design/#testing-and-regenerating&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;re going to make testing easy with a timer that changes permutation every 4 seconds.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reGenTimer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;drawCircles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually, I&#39;m super impatient so we&#39;re also going to add a click event listener so that I can just click for a new generation.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;drawCircles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;css-for-some-more-flair&quot;&gt;CSS for some more flair &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/generative-design/#css-for-some-more-flair&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What&#39;s awesome about generating random elements is that you already have them in a random sequence.  So you can add very sequential CSS rules using the &lt;code&gt;:nth&lt;/code&gt; selectors and still get away with looking random - no need to put this stuff in your JS.&lt;/p&gt;
&lt;p&gt;Below, I just make every 2nd, 3rd, 4th and 5th circle a different stroke color.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;circle:nth-child(2n)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#6ac&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;circle:nth-child(3n)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#678&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;circle:nth-child(4n)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#345&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;circle:nth-child(5n)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#9ab&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Click below to refresh faster&lt;/p&gt;
&lt;style&gt;
#stage{cursor:pointer;}
#stage circle {stroke: DeepPink;fill: none;stroke-width:2;}
#stage circle:nth-child(2n) {stroke:#6ac}
#stage circle:nth-child(3n){stroke:#678}
#stage circle:nth-child(4n){stroke:#345}
#stage circle:nth-child(5n){stroke:#9ab}
&lt;/style&gt;
&lt;svg id=&quot;stage&quot; width=&quot;100%&quot; height=&quot;20em&quot; viewBox=&quot;0 0 100 100&quot;&gt;
&lt;circle cx=&quot;10&quot; cy=&quot;10&quot; r=&quot;5&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;20&quot; cy=&quot;90&quot; r=&quot;4&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;30&quot; cy=&quot;40&quot; r=&quot;3&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;40&quot; cy=&quot;30&quot; r=&quot;2&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;50&quot; cy=&quot;70&quot; r=&quot;1&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;60&quot; cy=&quot;60&quot; r=&quot;6&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;70&quot; cy=&quot;30&quot; r=&quot;7&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;80&quot; cy=&quot;80&quot; r=&quot;8&quot;&gt;&lt;/circle&gt;
&lt;circle cx=&quot;90&quot; cy=&quot;10&quot; r=&quot;9&quot;&gt;&lt;/circle&gt;
&lt;/svg&gt;
&lt;script&gt;
function removeAll() {
document.getElementById(&quot;stage&quot;).innerHTML = &quot;&quot;;
}
removeAll();
let svg = document.getElementById(&quot;stage&quot;);
function drawCircles() {
for (i = 0; i &lt; 15; i++) {
circle = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;circle&quot;);
circle.setAttribute(&quot;pathLength&quot;, &quot;1&quot;);
circle.setAttribute(&quot;stroke-width&quot;, &quot;1&quot;);
circle.setAttribute(&quot;r&quot;, Math.floor(Math.random() * 7) * 2 + 2);
circle.setAttribute(&quot;cx&quot;, Math.floor(Math.random() * 4) * 20 + 20);
circle.setAttribute(&quot;cy&quot;, Math.floor(Math.random() * 4) * 20 + 20);
svg.appendChild(circle);
}
}
document.addEventListener(&quot;click&quot;, function () {
removeAll();
drawCircles();
});
drawCircles();
var reGenTimer = window.setInterval(function () {
removeAll();
drawCircles();
}, 3000);
&lt;/script&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/andyfitz/pen/KKaxgvw&quot; rel=&quot;noreferer&quot; target=&quot;_blank&quot;&gt;Play with it on Codepen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And there you have it,  we&#39;ve made generative artwork.&lt;br /&gt;
Random but within constraints. Every iteration looks different but also like they belong together. The rules you set – and how wild you go, is entirely up to your vision.&lt;/p&gt;
&lt;p&gt;The whole dance of this technique is to ensure every permutation is a &lt;em&gt;hit&lt;/em&gt;  and looks like something you&#39;d be happy with. That&#39;s easier said than done when you can&#39;t push pixels, but trust me it&#39;s super rewarding knowing you have created a living system rather than a static piece.&lt;/p&gt;
&lt;h2 id=&quot;what-about-that-poster%3F&quot;&gt;What about that poster? &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/generative-design/#what-about-that-poster%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Remember I said we were going to make this a nice vector PDF poster?&lt;br /&gt;
Thanks to &lt;a href=&quot;http://make.cm/&quot;&gt;Make.cm&lt;/a&gt; we can, and &lt;a href=&quot;https://api.make.cm/make/t/ad146027-af14-4644-92e8-b13f1209bfda/k/17915c24-7159-4b2a-9552-a50f296fa3d6.c0e9241f95e4c5bbbf17b447538274b7/sync?size=A4&amp;amp;format=pdf&amp;amp;data%5Bempty%5D=nodata&quot;&gt;every single download&lt;/a&gt; will be generated uniquely.&lt;/p&gt;
&lt;p&gt;Checkout the GET request below for an A3 version&lt;br /&gt;
&lt;a style=&quot;padding:1em; margin: 1em 0;display:block; width: 100%;overflow:auto; &quot; class=&quot;button&quot; target=&quot;_new&quot; href=&quot;https://api.make.cm/make/t/ad146027-af14-4644-92e8-b13f1209bfda/k/17915c24-7159-4b2a-9552-a50f296fa3d6.c0e9241f95e4c5bbbf17b447538274b7/sync?size=A3&amp;format=pdf&amp;data[blank]=nodata&quot;&gt; https://api.make.cm/make/t/ad146027-af14-4644-92e8-b13f1209bfda/k/17915c24-7159-4b2a-9552-a50f296fa3d6.c0e9241f95e4c5bbbf17b447538274b7/sync?size=A3&amp;amp;format=pdf&amp;amp;data[blank]=nodata &lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Essential SVG tools</title>
		<link href="https://ndftz.com/posts/essential-svg-tools/"/>
		<updated>2021-04-15T00:00:00Z</updated>
		<id>https://ndftz.com/posts/essential-svg-tools/</id>
		<content type="html">&lt;p&gt;&lt;svg viewBox=&quot;-7 0 24 10&quot; style=&quot;height:15em; width:100%;background-color:#f87; fill:#fca&quot;&gt; &lt;path fill=&quot;#fff&quot; d=&quot;M-2.6 3H1.5V7H-2.6M8 7H13L10.5 3M5 3A2 2 0 105.001 3&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;This article contains SVG tools I reach for depending on need.&lt;br /&gt;
As the rifleman&#39;s creed goes: &lt;em&gt;“there are many like it but this one is mine”&lt;/em&gt;.&lt;br /&gt;
I like this list.&lt;/p&gt;
&lt;h2 id=&quot;preamble&quot;&gt;Preamble &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#preamble&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My affair with SVG began back when Adobe offered &lt;a href=&quot;https://www.w3.org/TR/1998/NOTE-PGML&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;PGML&lt;/a&gt;. I loved flash, but figured open standards would win the browser wars . You can read about&lt;a href=&quot;https://www.w3.org/Graphics/SVG/WG/wiki/Secret_Origin_of_SVG&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt; SVG&#39;s origins&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;Once W3C released the SVG draft: I was convinced SVG would own the web and be supported by all major browsers within months (it took years). Nevertheless, my courtship began.&lt;/p&gt;
&lt;p&gt;Fortunately SVG was more useful than just internet use.&lt;br /&gt;
By 2003, I had toyed with SVG in my studies.&lt;br /&gt;
By 2005, I had finally used SVG commercially thanks to &lt;a href=&quot;https://redhat.com/&quot;&gt;Red Hat&lt;/a&gt; (and UTF-8).&lt;/p&gt;
&lt;p&gt;SVG assists me in many tasks – from websites, to presentations, to apps, to toolchains.&lt;br /&gt;
Here&#39;s what I use today:  Some are online tools, some are scripts, some are desktop apps, some are libraries. All incredibly powerful (and/or fun) for the right situation.&lt;br /&gt;
So here goes, get your bookmark tool of choice fired up:&lt;/p&gt;
&lt;h2 id=&quot;svgomg&quot;&gt;&lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;SVGOMG&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#svgomg&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;svgomg&quot;&gt;&lt;svg viewBox=&quot;0 0 600 600&quot; style=&quot;height:15em; width:100%;background-color:#0097A7;&quot;&gt;&lt;path fill=&quot;#00BCD4&quot; d=&quot;M-2000-100H3131V395.68H-2000Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M269.224 530.33L519 395.485H269.224V530.33zM214.35 91.847H519v303.638H214.35V91.847z&quot; opacity=&quot;.22&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#FFF&quot; d=&quot;M80 341.735h189.224V530.33H80z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The webinterface to SVGO is so handy, I also use SVGO directly in apps and on the commandline.  Everybody should have local access to it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g svgo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;, &lt;a href=&quot;https://wwwz.snowpack.dev/&quot;&gt;snowpack&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/vite-plugin-svg&quot;&gt;vite-svg-plugin&lt;/a&gt; etc you likely use it too.&lt;br /&gt;
The plugins are fascinating and have bailed me out many times.&lt;/p&gt;
&lt;p&gt;There&#39;s also &lt;a href=&quot;https://github.com/RazrFalcon/svgcleaner&quot;&gt;SVG Cleaner&lt;/a&gt; which has some compelling benefits over SVGO.&lt;/p&gt;
&lt;h2 id=&quot;svg-path-editor&quot;&gt;&lt;a href=&quot;https://yqnn.github.io/svg-path-editor/&quot;&gt;SVG Path Editor&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#svg-path-editor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://yqnn.github.io/svg-path-editor/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;svg path editor&quot;&gt;&lt;svg viewBox=&quot; -1-1 15 15&quot; style=&quot;height:15em; width:100%;background-color:#678; fill:#eee&quot;&gt;  &lt;path d=&quot;M 4 8 L 10 1 L 13 0 L 12 3 L 5 9 C 6 10 6 11 7 10 C 7 11 8 12 7 12 A 1.42 1.42 0 0 1 6 13 A 5 5 0 0 0 4 10 Q 3.5 9.9 3.5 10.5 T 2 11.8 T 1.2 11 T 2.5 9.5 T 3 9 A 5 5 90 0 0 0 7 A 1.42 1.42 0 0 1 1 6 C 1 5 2 6 3 6 C 2 7 3 7 4 8 M 10 1 L 10 3 L 12 3 L 10.2 2.8 L 10 1&quot;&gt;&lt;/path&gt; &lt;/svg&gt;&lt;/a&gt;&lt;br /&gt;
I use this now more than even &lt;a href=&quot;http://www.inkscape.org/&quot;&gt;Inkscape&lt;/a&gt; for simple illustrations, and I really wish the preview would let me add my CSS. But still, this thing is pure GOLD!&lt;br /&gt;
When finishing an illustration I often return to this tool and go path by path to reduce unnessecary coordinates and operators. Stealing a few decimals here and there, replacing cubic bezier path operators with more optimal ones like quadratics or arcs.&lt;/p&gt;
&lt;p&gt;SVG path editor will dramatically improve your understanding of the SVG path system.&lt;br /&gt;
Also try out this &lt;a href=&quot;https://svg-path-visualizer.netlify.app/#M5%208.5l3-4c2-3-3-4-3-1%200-3-5-2-3%201z&quot;&gt;SVG path visualizer&lt;/a&gt;  I put the heart from this article in it&#39;s URL param - very handy when teaching SVG.&lt;/p&gt;
&lt;h2 id=&quot;svg-crop&quot;&gt;&lt;a href=&quot;https://svgcrop.com/&quot;&gt;SVG Crop&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#svg-crop&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://svgcrop.com/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;svgcrop&quot;&gt;&lt;svg viewBox=&quot;0 -1 10 12&quot; style=&quot;height:15em; width:100%;background-color:#123; stroke-width:.5; stroke:#e3e6e9; stroke-miterlimit:9&quot;&gt;&lt;path fill=&quot;#7298a0&quot; d=&quot;M 5 1 a 4 4 0 1 0 0.001 0 &quot;&gt;&lt;/path&gt;&lt;path d=&quot;M 1 1 h 4 l -2 8z&quot; stroke=&quot;#123&quot; stroke-width=&quot;1&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#a43365&quot; d=&quot;M 1 1 h 4 l -2 8z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Remove the extra margin from around your SVG content so the file is easy to work with.&lt;br /&gt;
&lt;a href=&quot;http://svgcrop.com/&quot;&gt;SVGcrop.com&lt;/a&gt; resizes the SVG artboard by changing the &lt;code&gt;viewBox=&amp;quot;..&lt;/code&gt; attribute&lt;br /&gt;
It&#39;s not 100% bulletproof (invisible shapes like clippaths will affect the viewBox) but handy all the same.&lt;/p&gt;
&lt;h2 id=&quot;svg-url-encoder&quot;&gt;&lt;a href=&quot;https://yoksel.github.io/url-encoder/&quot;&gt;SVG URL Encoder&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#svg-url-encoder&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inline SVG into CSS - hey it&#39;s a gnarly technique but I still find myself throwing SVG into pseudo elements all the time. Think of the saved HTTP request!&lt;br /&gt;
This tool from Yoksel makes it super easy!&lt;/p&gt;
&lt;h2 id=&quot;relative-clip-path&quot;&gt;&lt;a href=&quot;https://yoksel.github.io/relative-clip-path/&quot;&gt;Relative clip-path &lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#relative-clip-path&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For turning SVG paths into CSS-friendly &lt;code&gt;clip-path&lt;/code&gt; coordinates. Super handy.&lt;/p&gt;
&lt;h2 id=&quot;svg-fitler-builder&quot;&gt;&lt;a href=&quot;https://svgfilters.com/&quot;&gt;SVG Fitler Builder&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#svg-fitler-builder&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://svgfilters.com/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;svgfilters&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;height:15em; width:100%;background-color:#4b5ca3;&quot; viewBox=&quot;0 -10 119.9 164.8&quot;&gt;&lt;path fill=&quot;#6795e9&quot; d=&quot;M75.2 79.3a22.9 22.9 0 0043.5 0zm-3.7 23.8a23.1 23.1 0 00-26.9 3.2c-7.2 7-8.1 18-3.6 26.8z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#41bfd0&quot; d=&quot;m97.5 50c-4.9 0-10 1.6-13 4.3a1.6 1.6 0 00-.2 0a23.8 23.8 0 00-2 1.6c-5.7 4.3-23.6 13.7-46-1l-1.8-1.3a22.4 22.4 0 10.5 37.3a22.3 22.3 0 002.5-1.9c12.2-9.5 23-9 23-9h40.6c5.8 0 11.7 3 11.7 8.7a22.4 22.4 0 00-15.3-38.7zm-22.1 30c-.7 10.5-9.6 20.7-9.6 20.7l-13.5 20.2c-3.4 4.8-9 8-13.8 4.7c3 20 28.9 26 40.5 9.5c2.8-4 4.4-9.2 3.8-13.2l.1-.2-.1-2.5c-.3-6.8 1.2-19.3 18.2-24.5a22.9 22.9 0 01-25.5-14.7zm37.4 8.6zzzm-52.8-88.6a23 23 0 10.001 0&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;br /&gt;
Creating complex SVG Filters is incredibly hard, Thankfully we have this brilliant tool.&lt;br /&gt;
There&#39;s an alternative &lt;a href=&quot;https://yoksel.github.io/svg-filters/#/&quot;&gt;SVG Filter Constructor&lt;/a&gt; by &lt;a href=&quot;https://yoksel.github.io/&quot;&gt;Yoksel&lt;/a&gt; with a less intimidating interface that&#39;s worth a look.&lt;br /&gt;
Actually &lt;a href=&quot;https://boxy-svg.com/app&quot;&gt;Boxy SVG editor&lt;/a&gt; has a great compositing editor which is easy to use too.&lt;/p&gt;
&lt;h2 id=&quot;svg-gradient-map-builder&quot;&gt;&lt;a href=&quot;https://yoksel.github.io/svg-gradient-map/#/&quot;&gt;SVG Gradient Map Builder&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#svg-gradient-map-builder&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Who doesn&#39;t love Duotone effects?  SVG Gradient Map filters make them achievable native on the web.&lt;br /&gt;
There&#39;s just one annoying catch.  when you are coding these you need to convert your R G and B into separate channels and divide by 255 then place them your R G and B numbers for different colours next to eachother - it feels kind of unnatural.&lt;br /&gt;
This tool makes creating a custom filter easy.&lt;/p&gt;
&lt;p&gt;If you want to automate this, I also &lt;a href=&quot;https://codepen.io/andyfitz/pen/KKagbqe&quot;&gt;wrote a CodePen&lt;/a&gt; that converts any array into swatches and a duotone effect.&lt;/p&gt;
&lt;h2 id=&quot;inkscape&quot;&gt;&lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#inkscape&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inkscape.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;inkscape&quot;&gt;&lt;svg viewBox=&quot; 0 0 100 100&quot; style=&quot;height:15em; width:100%;background-color:#e2e6e9; fill:var(--dark)&quot;&gt;&lt;path d=&quot;M 40.8 7 L 7.2 41.3 C -5 55.2 14.9 53.7 23.1 57.8 C 27.3 59.8 12 63 15 66 C 18 69 32 71 35.6 75 C 39 78 29.5 81 32.4 83.9 C 35.4 86.9 42.1 84.1 43.4 91 C 44.3 96 55.6 93.2 61.1 89.1 C 64.1 86.1 55.5 86.4 58.5 83.4 C 65.8 75.9 72.5 80.7 75 73.2 C 76.3 69.5 63 67 67 64.5 C 75.7 59.5 105 56.6 91 42.5 L 56.2 7 Q 48.5 -1 40.8 7 Z M 79.4 73 C 78.8 75 91.9 76 91.9 72.8 C 90.1 67.6 81 68 79.4 73 Z M 32 78 Q 26 75 23 78 T 24 83 T 32 78 M 77.8 76.7 C 74 80.1 78 83.8 82 81.4 C 83 80.6 82 77.6 77.8 76.7 Z M 32.8 59.7 Q 41 62 50.5 63.4 C 52 63.6 51 65.2 49.3 65.6 C 45.7 66.6 28.3 59.6 32.8 59.7 Z M 54.1 9.4 L 67.3 22.9 Q 69.6 25.3 68 27.4 L 61.4 22 L 60 30 L 54.5 27 L 45.6 32.6 L 42.6 21 L 38 29 H 30.7 Q 23.9 29 30.1 22.6 L 43.1 9.4 Q 48.4 3.5 54.1 9.4 Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Isn&#39;t the evolution of open source desktop applications awesome?&lt;br /&gt;
&lt;a href=&quot;https://wiki.inkscape.org/wiki/index.php/InkscapeHistory&quot;&gt;Gill &amp;gt; Sodipodi &amp;gt; Inkscape&lt;/a&gt;&lt;br /&gt;
I&#39;ve loved this journey and especially love where it is now.&lt;br /&gt;
Run it on your linux machine, your mac .. its brilliant for creative exploration, and especially illustration.&lt;br /&gt;
I&#39;ve used Inkscape since it&#39;s inception. Demoed it around the planet and pleaded for top designers to consider it. I could go on and on but let me just say it&#39;s &lt;strong&gt;the very best tool for illustration of complex paths&lt;/strong&gt;. and leave the rest up to your imagination.&lt;/p&gt;
&lt;h2 id=&quot;penpot&quot;&gt;&lt;a href=&quot;https://penpot.app/&quot;&gt;Penpot&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#penpot&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://penpot.app/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;penpot&quot;&gt;&lt;svg viewBox=&quot;0 -1 10 12&quot; style=&quot;height:15em; width:100%;background-color:#83f5d4; fill:none; stroke-width:.4; stroke:var(--dark)&quot;&gt;&lt;path d=&quot;M2.3 3.4V1.6L3.2.3l.9 1.3V2L5 .7 5.9 2v-.4L6.8.3l.9 1.3v1.8M5 4.8v5M2.3 2.5l-.9.5v5L5 9.8 8.6 8V3l-.9-.5M1.4 3L5 4.8 8.6 3M4.1 2v2.3M5.9 2v2.3M2.9.8h.6m1.2.4h.6M6.5.8h.6&quot;&gt;&lt;/path&gt;&lt;path stroke-width=&quot;.3&quot; d=&quot;M2.3 1.8h1.8m0 .4h1.8m0-.4h1.8m-4.5 0v2M5 2.2v2.6m1.8-3v2.1&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;br /&gt;
Early days to call this a Figma killer - But I do find it does most of what I want out of Figma (for free and freedom). Super impressed and excited to see where this project goes.&lt;/p&gt;
&lt;h2 id=&quot;rawgraphs&quot;&gt;&lt;a href=&quot;https://app.rawgraphs.io/&quot;&gt;RawGraphs &lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#rawgraphs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://app.rawgraphs.io/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;rawgraphs&quot;&gt;&lt;svg viewBox=&quot;0 0 14 5&quot; style=&quot;height:15em;width:100%;background-color:#f2f6fa; font-family:Work Sans, sans-serif; font-weight:300;&quot; fill=&quot;#0dc4a3&quot;&gt;&lt;text font-size=&quot;2&quot; x=&quot;7&quot; y=&quot;3&quot; text-anchor=&quot;middle&quot; dominant-baseline=&quot;middle&quot;&gt;&lt;tspan fill=&quot;#3e3e41&quot; font-weight=&quot;900&quot;&gt;RAW&lt;/tspan&gt;Graphs&lt;/text&gt;&lt;/svg&gt;&lt;/a&gt;&lt;br /&gt;
Brilliant way to pre-render beautiful data graphics, create the layout in rawgraphs then style with your own CSS.&lt;/p&gt;
&lt;h2 id=&quot;boxy-editor&quot;&gt;&lt;a href=&quot;https://boxy-svg.com/app&quot;&gt;Boxy Editor&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#boxy-editor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://boxy-svg.com/app&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;boxysvg&quot;&gt;&lt;svg viewBox=&quot;0 0 1024 1024&quot; style=&quot;height:15em;width:100%;background-color:hsla(211, 86%, 57%, 1.00);&quot;&gt;&lt;path fill=&quot;#de6547&quot; d=&quot;M132.4 732V291.5l202.9 117.9v205L132.4 732z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#fdbc4d&quot; d=&quot;M513 952.7V722.4L335.2 614.5 132.4 732 513 952.7z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#69b356&quot; d=&quot;M891.6 732V291.5L688.7 409.4v205L891.6 732z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#d1e993&quot; d=&quot;M513 952.7V722.4l175.7-107.9L891.6 732 513 952.7z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#80b7fa&quot; d=&quot;M513 71.3v230.3L335.2 409.5 132.4 292 513 71.3z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#4581e1&quot; d=&quot;M513 71.3v230.3l175.7 107.9L891.6 292 513 71.3z&quot;&gt;&lt;/path&gt;&lt;g&gt;&lt;path fill=&quot;#fff&quot; stroke=&quot;#2f2f2f&quot; stroke-width=&quot;66.880944&quot; d=&quot;M585 542.3h90.2a43.6 43.6 0 100-60.5H585l63.8-63.8h.8a43.6 43.6 0 10-43.6-43.6v.8L542.3 439v-90.2a43.5 43.5 0 10-60.5 0V439L418 375.2v-.8a43.6 43.6 0 10-43.6 43.6h.8l63.8 63.8h-90.2a43.6 43.6 0 100 60.5H439L375.2 606h-.8a43.6 43.6 0 1043.6 43.6v-.8l63.7-63.8v90.2a43.5 43.5 0 0030.3 75 43.6 43.6 0 0030.3-75V585l63.7 63.8v.8a43.6 43.6 0 1043.6-43.6h-.8z&quot; paint-order=&quot;stroke&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/a&gt;&lt;br /&gt;
At first sight, boxy looks like yet another svg-edit clone. But open up the panels and start editing (start using the i and o keys) and you&#39;ll see why it&#39;s fantastic for small projects.&lt;/p&gt;
&lt;h2 id=&quot;librsvg&quot;&gt;&lt;a href=&quot;https://gitlab.gnome.org/GNOME/librsvg&quot;&gt;librSVG&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#librsvg&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.gnome.org/GNOME/librsvg&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;librsvg&quot;&gt;&lt;svg viewBox=&quot;0 0 10 10&quot; style=&quot;stroke-linecap:round;height:15em;width:100%;background-color:#555&quot; fill=&quot;none&quot; stroke=&quot;#eee&quot; stroke-width=&quot;.4&quot;&gt;&lt;path d=&quot;M2 4A1 1 0 102.001 4M7 1A1 1 0 107.001 1M2 5 7 7V2M5.5 6.9 7 8.4 8.5 6.9 7 5.4Z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a blazingly fast library to work with SVG files (used in ImageMagick and heaps more). If you are a performance-driven developer, &lt;a href=&quot;https://gitlab.gnome.org/GNOME/librsvg/-/blob/master/src/bin/rsvg-convert.rs&quot;&gt;RSVG convert&lt;/a&gt; in particular will blow your mind. Also you should follow &lt;a href=&quot;https://people.gnome.org/~federico/blog/tag/librsvg.html&quot;&gt;Federico Mena-Quintero&lt;/a&gt; Who is dragging RSVG into the future with Rust.&lt;/p&gt;
&lt;p&gt;Worthy mention goes to &lt;a href=&quot;https://github.com/RazrFalcon/resvg&quot;&gt;reSVG&lt;/a&gt; which is a super performant and powerful alternative to rSVG.&lt;/p&gt;
&lt;h2 id=&quot;imagetracer-js&quot;&gt;&lt;a href=&quot;https://github.com/jankovicsandras/imagetracerjs&quot;&gt;Imagetracer JS&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#imagetracer-js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many bitmap to vector tracers like &lt;a href=&quot;http://potrace.sourceforge.net/&quot;&gt;potrace&lt;/a&gt;, autotrace etc. Imagetracer is the most promising for web developers and has a few tricks up it&#39;s sleeve.&lt;br /&gt;
Handy to have on the CLI too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;imagetracerjs/nodecli&amp;gt;node nodecli ../in.png outfilename out.svg scale 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;2geom&quot;&gt;&lt;a href=&quot;https://gitlab.com/inkscape/lib2geom&quot;&gt;2geom&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#2geom&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/inkscape/lib2geom&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; aria-label=&quot;lib2geom&quot;&gt;&lt;svg viewBox=&quot;0 0 10 10&quot; style=&quot;height:15em;width:100%;background-color:#eee&quot; fill=&quot;none&quot; stroke=&quot;#222&quot; stroke-linejoin=&quot;round&quot; stroke-linecap=&quot;round&quot;&gt;&lt;path stroke=&quot;#4e9a06&quot; d=&quot;M 0.8 3 C 1.8 2 3.8 2 3.8 4 C 3.8 6 0.8 5.4 0.8 7 H 3.8&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M 5.4 9 C 10.1 9 5.6 2.8 9 2 M 6.25 7 a 1.4 1.4 0 1 1 0.01 0 z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;br /&gt;
If you&#39;re building an app that needs to perform fast and accurate 2d computational geometry (boolean operations and way way more) you&#39;ll end up grateful for &lt;a href=&quot;http://njhurst.com/&quot;&gt;Nathan Hurst&lt;/a&gt; and all other contributors who made lib2geom possible.&lt;br /&gt;
Fun fact, Inkscape uses 2geom under the hood and also powers the amazing live path effects etc.&lt;/p&gt;
&lt;h2 id=&quot;single-purpose-svg-generator-tools&quot;&gt;Single-purpose SVG generator tools &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#single-purpose-svg-generator-tools&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;svg viewBox=&quot;0 0 72 72&quot; style=&quot;height:15em;width:100%;background-color:#e2e6e9; font-family:Work Sans, system-ui, sans-serif; font-weight:300;&quot;&gt;&lt;path fill=&quot;#f93&quot; d=&quot;M14 50C7 36 25 6 42 5s32 27 22 42c-9 15-43 17-50 3z&quot;&gt;&lt;/path&gt;&lt;path fill=&quot;#f06&quot; d=&quot;M40 36c6 6 15 11 16 16-2 15-25 17-35 11C9 55 1 37 8 25c4-6 13-10 19-7 5 3 8 11 13 18&quot;&gt;&lt;/path&gt; &lt;text font-size=&quot;55&quot; x=&quot;36&quot; y=&quot;40&quot; text-anchor=&quot;middle&quot; dominant-baseline=&quot;middle&quot; fill=&quot;#fff&quot; font-weight=&quot;900&quot;&gt;B&lt;/text&gt;&lt;/svg&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.blobmaker.app/&quot;&gt;Blob Maker&lt;/a&gt; and &lt;a href=&quot;https://getwaves.io/&quot;&gt;Wave Maker&lt;/a&gt; - both part of the super cool &lt;a href=&quot;https://app.haikei.app/&quot;&gt;haikei app&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://codepen.io/georgedoescode/full/dyNVNjG&quot;&gt;Noise maker&lt;/a&gt; nice patterns of directional lines or dots&lt;br /&gt;
&lt;a href=&quot;https://yoksel.github.io/wave-maker/&quot;&gt;Arc Wave Maker&lt;/a&gt; nifty example of repeating arc paths&lt;br /&gt;
&lt;a href=&quot;https://www.misha.studio/snowflaker/&quot;&gt;Snowflakes&lt;/a&gt; Random snowflakes&lt;br /&gt;
&lt;a href=&quot;https://yoksel.github.io/snowflake/&quot;&gt;Snowflake Painter&lt;/a&gt; Design a snowflake with lines&lt;/p&gt;
&lt;!-- 
## [Create.Rip](https://create.rip)

Easily convert design files to web ready formats then extract individul elements. 
Accepts most traditional formats (PDF AI PSD TIFF etc) .

I&#39;d be remiss for not including this one.

https://create.rip is a web service we built at Outfit for ourselves with the help of [embersea](http://www.embersea.io/) and [devaway](https://devaway.io/)

We decided to host and share it with the world -

Dedicated in memory to Ihor Novikov author of the Uniconvertor and Sk1 who passed March 15th, 2021 hospitalised by a stroke and subsequently COVID-19 --&gt;
&lt;h2 id=&quot;what-else%3F&quot;&gt;What else? &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#what-else%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well there&#39;s lots of nifty things I havent personally climbed into.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gliffy/canvas2svg&quot;&gt;Canvas2SVG &lt;/a&gt; - I have a feeling I&#39;ll get to know this library well someday.&lt;br /&gt;
&lt;a href=&quot;https://xmlgraphics.apache.org/batik/&quot;&gt;Apache Batik&lt;/a&gt;  - I used it quite a bit in the early days but it never took root in my toolchain.&lt;br /&gt;
&lt;a href=&quot;https://svgjs.com/docs/3.0/&quot;&gt;SVGJS&lt;/a&gt; It offers compelling shortcuts, I&#39;m just a fan of vanilla JS. This also goes for &lt;a href=&quot;http://snapsvg.io/&quot;&gt;SNAP SVG&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;thank-you-svg&quot;&gt;Thank you SVG &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/essential-svg-tools/#thank-you-svg&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;svg viewBox=&quot;0 0 10 10&quot; style=&quot;height:15em; width:100%;background-color:#f87; fill:#fff&quot; stroke=&quot;#fca&quot; paint-order=&quot;stroke&quot; stroke-width=&quot;2&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M5 8.5l3-4c2-3-3-4-3-1 0-3-5-2-3 1z&quot;&gt;&lt;/path&gt; &lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;So there you have it, the best tools to help you with SVG.&lt;br /&gt;
By the way, all the images in this article were super-tiny inlined SVG - open web inspector and see for yourself.&lt;/p&gt;
&lt;p&gt;On a personal note:&lt;br /&gt;
There are heroes I&#39;d like to recognise; friends who moved SVG forward directly or indirectly - at least in my universe:&lt;br /&gt;
&lt;a href=&quot;https://mcc.id.au/&quot;&gt;Cam Mcormack&lt;/a&gt;, &lt;a href=&quot;https://raphlinus.github.io/&quot;&gt;Raph Levien&lt;/a&gt;, &lt;a href=&quot;https://svgees.us/&quot;&gt;Chris Lilley&lt;/a&gt;, &lt;a href=&quot;https://cworth.org/&quot;&gt;Carl Worth&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/People/Quin/&quot;&gt;Liam Quinn&lt;/a&gt;, &lt;a href=&quot;http://njhurst.com/&quot;&gt;Nathan Hurst&lt;/a&gt;, Peter Moulder, &lt;a href=&quot;http://tavmjong.free.fr/&quot;&gt;Tavmjong Bah&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bryceharrington&quot;&gt;Bryce Harrington&lt;/a&gt;, &lt;a href=&quot;https://www.ekips.org/&quot;&gt;Aaron Spike&lt;/a&gt;, Jon Cruz, Bulia Byak, &lt;a href=&quot;https://gould.cx/ted/&quot;&gt;Ted Gould&lt;/a&gt;, &lt;a href=&quot;http://schepers.cc/&quot;&gt;Doug Schepers&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/domlachowicz&quot;&gt;Dom Lachowicz&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/dodjiseketeli&quot;&gt;Dodji Seketeli&lt;/a&gt;, &lt;a href=&quot;https://blog.fishsoup.net/&quot;&gt;Owen Taylor&lt;/a&gt; and so many more.&lt;/p&gt;
&lt;style&gt;article svg{border-radius: 1em;} article a svg &gt; *{transition: transform .25s ease; transform-origin:50% 50%; transform:scale(.95)}article a:hover svg &gt; *{transition: transform .35s cubic-bezier(.4,.2,.1,1); transform-origin:50% 50%;transform:Scale(1)}&lt;/style&gt;</content>
	</entry>
	
	<entry>
		<title>The smallest SVG possible</title>
		<link href="https://ndftz.com/posts/small-svg/"/>
		<updated>2021-04-11T00:00:00Z</updated>
		<id>https://ndftz.com/posts/small-svg/</id>
		<content type="html">&lt;p&gt;How would you make my site favicon from a bitmap into an SVG? &lt;em&gt;(don’t cheat with web inspector)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;svg viewBox=&quot;.5 .5 3 4&quot; fill=&quot;none&quot; stroke=&quot;lightseagreen&quot; stroke-linecap=&quot;round&quot; style=&quot;width:100%; height:10em; background-color: var(--bg-2)&quot;&gt;&lt;path d=&quot;M1 4h-.001V1h2v.001M1 2.6h1v.001&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;The lazy me would just software trace using my favourite illustration tool. (&lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt;)&lt;br /&gt;
&lt;img src=&quot;https://ndftz.com/img/small-svg/f.webp&quot; alt=&quot;inkscape with an autotraced shape&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But yuck, look at those node coordinates, and the shape is kind of melted when you look up close.&lt;/p&gt;
&lt;p&gt;In better news, the resulting filesize is an affordable &lt;strong&gt;2kb&lt;/strong&gt;, much smaller than a decent resolution png or jpeg – but files over two thousand bytes are rookie numbers!&lt;br /&gt;
We&#39;re a long way from optimal SVG sizes.&lt;/p&gt;
&lt;p&gt;So maybe we should roll up our sleeves and manually redraw it with the pen tool — being careful about where to place nodes, and when to use straight lines vs beziers.&lt;/p&gt;
&lt;img src=&quot;https://ndftz.com/img/small-svg/f-manual.png&quot; alt=&quot;manually placed cubic beziers&quot; /&gt;
&lt;p&gt;Woohoo we&#39;re now at &lt;strong&gt;800 bytes&lt;/strong&gt; - less than half the original size.&lt;/p&gt;
&lt;p&gt;At this point, I&#39;d urge you to go one step further and optimise with &lt;a href=&quot;https://github.com/svg/svgo&quot;&gt;SVGO&lt;/a&gt; or manually with &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;SVGOMG&lt;/a&gt; — being sure not to melt the shape with precision settings.&lt;/p&gt;
&lt;img src=&quot;https://ndftz.com/img/small-svg/f-omg.png&quot; alt=&quot;SVGO optimising an SVG file&quot; /&gt;
&lt;p&gt;Wow, that worked great — We&#39;re now at around &lt;strong&gt;236 bytes&lt;/strong&gt; which is excellent.  The shape is even closer to the original than tracing. This is usually as good as it gets, an 88% reduction from automatic tracing. IMO this was worth the effort.&lt;/p&gt;
&lt;h2 id=&quot;what-if-we-went-deeper%3F&quot;&gt;What if we went deeper? &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#what-if-we-went-deeper%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I managed to get the image down to &lt;strong&gt;127 bytes&lt;/strong&gt;, 46% smaller than our best 236 byte image. All with full-fidelity by using a &lt;code&gt;stroke-linecap:round&lt;/code&gt; hack.&lt;br /&gt;
Here&#39;s the full SVG:&lt;/p&gt;
&lt;pre class=&quot;language-svg&quot;&gt;&lt;code class=&quot;language-svg&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;.5 .5 3 4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#20b2a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token attr-name&quot;&gt;stroke-linecap&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;round&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;br /&gt;M1 4h-.001&lt;br /&gt;V1h2v.001&lt;br /&gt;M1 2.6&lt;br /&gt;h1v.001&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First I stroke the lines so I save on doubling coordnates, then I exploit the &lt;code&gt;v&lt;/code&gt;and &lt;code&gt;h&lt;/code&gt; relative operators at tiny offsets.&lt;/p&gt;
&lt;p&gt;See the values with &lt;code&gt;h.001&lt;/code&gt; and &lt;code&gt;v.001&lt;/code&gt; and &lt;code&gt;h-.001&lt;/code&gt;  ?&lt;br /&gt;
That&#39;s how I hacked the directional rounded corners.&lt;/p&gt;
&lt;p&gt;Normally &lt;code&gt;stroke-linecap:round&lt;/code&gt; is just round. Nothing you can do about it.&lt;br /&gt;
But when you change direction &lt;em&gt;REALLY&lt;/em&gt; close to the edge coordinate, the cusp squares off on one side only, and you can control which side with negative or positive relative values.&lt;/p&gt;
&lt;p&gt;Neat huh? We&#39;re just getting started...&lt;/p&gt;
&lt;h1 id=&quot;the-outfit-logo&quot;&gt;The Outfit logo &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#the-outfit-logo&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A while back, I created this interactive demo of the Outfit logo to teach some of the fundamentals of plotting and styling SVG path coordinates.  There&#39;s no fill here.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;470&quot; data-theme-id=&quot;1777&quot; data-default-tab=&quot;result&quot; data-user=&quot;andyfitz&quot; data-slug-hash=&quot;gOwzMwV&quot; style=&quot;height:470px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Outfit Logo Inspector&quot;&gt; &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/andyfitz/pen/gOwzMwV&quot;&gt;  Outfit Logo Inspector&lt;/a&gt; by Andy Fitzsimon (&lt;a href=&quot;https://codepen.io/andyfitz&quot;&gt;@andyfitz&lt;/a&gt;)   on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;style&gt;@media(max-width:70em){.cp_embed_wrapper iframe{height: 46em !important;}}&lt;/style&gt;
&lt;h2 id=&quot;history-of-the-mark&quot;&gt;History of the mark &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#history-of-the-mark&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://rowanhogan.com/&quot; rel=&quot;noreferrer&quot;&gt;Rowan Hogan&lt;/a&gt; originally designed the Outfit logo. No doubt without regard specifically for SVG format optimisation. Don’t let the medium become the message as they say.&lt;/p&gt;
&lt;p&gt;The design evolved with minor optical updates and when it came time to make this demo, it had optimisation amenities stacked against it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An optical overshoot (round coords non-exact to a grid)&lt;/li&gt;
&lt;li&gt;Non-perfect curves (the f and the u are bent differently)&lt;/li&gt;
&lt;li&gt;Non 1:1 grid rhythm (1:1.3 spacing of stems)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thankfully the solution above is full-fidelity to the intended mark.&lt;/p&gt;
&lt;p&gt;It got even smaller as a one-liner:  &lt;strong&gt;253 bytes&lt;/strong&gt;, styled and uncompressed (not bad for so many letters)&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 19 8.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#e40046&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2.36&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6.12&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.68&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M5.35 4&lt;br /&gt;v2.5A1.02 1 0 008 6.5v-2h10.68&lt;br /&gt;M10.2 8.2v-6&lt;br /&gt;m2.3 6V2a1.3 1.2 10 012-1&lt;br /&gt;m.3 7.2V4.5&lt;br /&gt;m2.3 3.7v-6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M14.8 2.8v0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token attr-name&quot;&gt;stroke-linecap&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;round&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;rules-to-svg-by&quot;&gt;Rules to SVG by &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#rules-to-svg-by&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This list is by no means comperehensive but it does serve as a rough guide&lt;/p&gt;
&lt;h2 id=&quot;small-artboards&quot;&gt;Small Artboards &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#small-artboards&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ensure coodinate precision by keeping your &lt;code&gt;viewBox&lt;/code&gt; under 10 or 100 - from zero&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 10 10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It makes sense to factor up by 10 for more intricate shapes.&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 100 100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;   &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both scales work depending on the complexity of your image. The point here is we dont want every coordinate to be in the thousands, we also want to avoid unnessecary decimal coordinates. Every byte counts.&lt;br /&gt;
If every coordinate has a decimal place, go up by 10. If only a few do, try to round up.&lt;/p&gt;
&lt;h2 id=&quot;stroke-if-you-can&quot;&gt;Stroke if you can &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#stroke-if-you-can&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every shape you can pull off as a stroke that would otherwise be a filled path saves you 2-3x bloat in coordinate. This is fairly easy to visualise as a stroke only has an inner line that can be expanded wheras a filled shape has two outer lines to create a zone.&lt;/p&gt;
&lt;p&gt;When you combine the right sized &lt;code&gt;viewBox&lt;/code&gt; and stroked path, you wont even have to set &lt;code&gt;stroke-width&lt;/code&gt; as it defaults to 1 viewBox unit.&lt;/p&gt;
&lt;h2 id=&quot;know-when-to-capital-or-lowercase-path-coordinates&quot;&gt;Know when to capital or lowercase path coordinates &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#know-when-to-capital-or-lowercase-path-coordinates&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don&#39;t know the difference?&lt;br /&gt;
Uppercase Letters like &lt;code&gt;M&lt;/code&gt; &lt;code&gt;C&lt;/code&gt; &lt;code&gt;L&lt;/code&gt;  &lt;code&gt;A&lt;/code&gt; &lt;code&gt;H&lt;/code&gt; &lt;code&gt;V&lt;/code&gt; &lt;code&gt;Q&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; etc all start an operation relative to the viewBox&lt;br /&gt;
Lowercase letters (same as above) &lt;code&gt;m&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; &lt;code&gt;l&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;h&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; &lt;code&gt;q&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; etc start from the last coordinate you did&lt;/p&gt;
&lt;p&gt;Relative or absolute positioned coordinates make a huge difference. Sometimes optimisation tools like SVGO can select which one is best, but not always.&lt;/p&gt;
&lt;h2 id=&quot;chose-your-operator-wisely&quot;&gt;Chose your operator wisely &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#chose-your-operator-wisely&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using a horizontal &lt;code&gt;H&lt;/code&gt; or vertical &lt;code&gt;V&lt;/code&gt; operator is great because you only need one coodinate it saves you tryping both X and Y,  you only need one coordinate so that halves what would otherwise be redundant axis data with the line-to &lt;code&gt;L&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;Arc paths, quadratics and cubic splines all have their own benefits and problems.&lt;/p&gt;
&lt;h2 id=&quot;dirty-path-tricks&quot;&gt;Dirty Path Tricks &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#dirty-path-tricks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;circle-with-single-arc-operators&quot;&gt;Circle with single arc operators &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#circle-with-single-arc-operators&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can draw &#39;pretty much&#39; a perfect circle with a single SVG path arc operator.&lt;/p&gt;
&lt;p&gt;If you&#39;re already working in a &lt;code&gt;path d=&amp;quot;&amp;quot; &lt;/code&gt; element, there&#39;s no need for a new element.&lt;br /&gt;
This saves you 10 bytes per circle in that context. So we can do:&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;M5 0a5 5 0 10.001 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vs having to go create a new element which could get messy for your CSS&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;dots-with-stroke-linecap%3D%22round%22&quot;&gt;Dots with stroke-linecap=&amp;quot;round&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://ndftz.com/posts/small-svg/#dots-with-stroke-linecap%3D%22round%22&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;if you&#39;re doing a line icon with linecap-round you can make a dot the exact width of your stroke just by doing a very short relative horizontal or vertical line&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M 5 5 h.001&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-linecap&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;round&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
