{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Andy Fitz",
  "language": "en",
  "home_page_url": "https://ndftz.com/",
  "feed_url": "https://ndftz.com/feed/feed.json",
  "description": "design code love",
  "author": {
    "name": "Andy Fitzsimon",
    "url": "https://ndftz.com/about/"
  },
  "items": [{
      "id": "https://ndftz.com/posts/i-know-who-your-big-customers-are/",
      "url": "https://ndftz.com/posts/i-know-who-your-big-customers-are/",
      "title": "How I know when you win a big customer",
      "content_html": "<p>Competitive intelligence is a big deal, it can turn a speculative gamble into a sure-thing.  With the right insight: we fish where the fish are, can plan to win, and campaign to eat the market from the top down. <br>\nIf you're new in the game without a killer funnel or flywheel (ugh buzzword fatigue)  it can be easier to churn a dissatisfied customer already spending with your competitor than it is to find and teach a new prospect what you are all about.</p>\n<h3 id=\"so-what-can-saas-do-when-facing-a-glut-of-competitors%3F\">So what can SaaS do when facing a glut of competitors? <a class=\"direct-link\" href=\"#so-what-can-saas-do-when-facing-a-glut-of-competitors%3F\">#</a></h3>\n<p>Firstly, celebrate, market validation is the greatest gift.<br>\nSecondly, get a lay of the land - know where you stand.</p>\n<p>There are commercial platforms that offer these kinds of tools - I'm not going to link them because I've never tried them.  But if you're happy to roll up your sleeves and run a few command line scripts, this is for you.</p>\n<p>In  this article, I'll cover three techniques</p>\n<ol>\n<li>Search trigger</li>\n<li>Name enumeration</li>\n<li>Door knocking</li>\n</ol>\n<p>This is so that you can</p>\n<ul>\n<li>Identify large accounts at other vendors.</li>\n<li>Track when they sign up and churn</li>\n<li>Learn how fast competitors are growing</li>\n</ul>\n<p>You can do plenty of this on your own workstation ad-hoc, or set up a VPS to run constant reports over time.</p>\n<p>So firstly let me disclose the important points:</p>\n<ul>\n<li>This is not meant to encourage any illegal or unethical activity</li>\n<li>You are responsible for how you leverage the learnings of this article.</li>\n<li>I am not a lawyer or from the infosec industry; this does not constitute professional advice.</li>\n<li>You will use your own competitor and prospect names</li>\n</ul>\n<h2 id=\"what-you-will-need\">What you will need <a class=\"direct-link\" href=\"#what-you-will-need\">#</a></h2>\n<ol>\n<li>\n<p>A list of your competitor domains<br>\n(any/all domains they use to host their customers if they use multiple for different storefronts or products)</p>\n</li>\n<li>\n<p>A list of target accounts<br>\n(say the top 10 thousand global companies by market cap or something as simple as the Forbes 500, or even just the ~ 100 businesses you are targeting right now) - Gather this yourself, there are commercial services offering solutions built on these lists but this is a DIY article.  Easy enough to get a hold of.</p>\n</li>\n</ol>\n<p>Okay with that out of the way, we can start with the obvious.</p>\n<h1 id=\"search\">Search <a class=\"direct-link\" href=\"#search\">#</a></h1>\n<p>SaaS companies love and need SEO, many encourage partial/full public usage of their platforms wherever possible.  Think github, codepen, even my employer Brandfolder.</p>\n<p>Their user activity might be mostly private, but it's in the vendors best interest to have as many <code>vendorname.com/yourcompany</code> instances as possible.</p>\n<p>So scripting a recurring search with tools like googler (<a href=\"https://github.com/jarun/googler\">https://github.com/jarun/googler</a>) like <code>site:competitordomain.com prospectName</code> is the easiest way of learning if an organisation has begun using a competitor.<br>\nSeems simple but this is frequently overlooked and you can skip the awkward &quot;who are you working with&quot; question in discovery calls.</p>\n<h1 id=\"domain-enumeration\">Domain Enumeration <a class=\"direct-link\" href=\"#domain-enumeration\">#</a></h1>\n<p>This one is similar but different to search in that even fully closed platforms often offer up whitelabelling subdomains as a feature to their accounts. <code>Companyname.competitordomain</code></p>\n<p>For this we can use services like <a href=\"https://github.com/OWASP/Amass/\">Amass</a> and <a href=\"https://github.com/aboul3la/Sublist3r\">sublist3r</a> .</p>\n<p>These tools will use a variety of techniques and do their best to surface all the custom subdomains  - giving you an idea of who is a customer and who is not.</p>\n<p>While not giving you target company lists, I'm not a monster. Here's a handy ignore list to clean up the results you get. <a href=\"https://gist.github.com/andyfitz/227921862fb81a7843a05479255711a9\">https://gist.github.com/andyfitz/227921862fb81a7843a05479255711a9</a></p>\n<h1 id=\"sso-door-knocking\">SSO Door knocking <a class=\"direct-link\" href=\"#sso-door-knocking\">#</a></h1>\n<p>I saved the best till last.  Lots of private-productivity SaaS environments neither subdomain nor subpath their customers.<br>\nBut like death and taxes, one other thing is certain:  Enterprise accounts demand SSO/IDP integration. So if they are a small team logging in with username/password - you may never know, but if they are a big customer, you'll be able to confirm relatively easily.</p>\n<p>I'm not even sure if this technique actually called something else - but I've called it door knocking because you're simply</p>\n<p>1. Visiting a website's login form</p>\n<p>2. Knocking it with a targeted domain's email.</p>\n<p>2. Checking the response sizes to confirm / disprove the account</p>\n<p>Over time, this helps you track acquisition and churn by large enterprise accounts.</p>\n<p>I'm not going to share how this is automated technically other than to say it involves rotating VPS proxies,  puppeteer, and form submission which is dead simple.<br>\nHere's a handy tutorial from Scrapingbeee that doesn't require use of their service <a href=\"https://www.scrapingbee.com/blog/submit-form-puppeteer/\">https://www.scrapingbee.com/blog/submit-form-puppeteer/</a>.<br>\nAfter reading that, you'll get the idea. automating requires you to set up a method for each competitor you want to track.</p>\n<p>Say you try knocking their loginform with <code>giuseppe@companyname.com</code>.</p>\n<p>If you get the same size response as <code>giuseppe@domaindoesnotexist.com</code> (or no response), then you can validate that companyname is either a small-time customer on a team plan or not a customer at all because they haven't implemented SSO.</p>\n<p>Again, you can do this manually by simply visiting your competitor website.<br>\nSelecting the email option, typing in <code>anyname@yourprospectdomain.com</code> and seeing if you hit an SSO gate. Handy right ?</p>\n<p>So that's it for now.</p>\n<p>I hope this was insightful.</p>\n<p>P.S I don't run any analytics on my blog so if you liked this article - tell me @andyfitz via most major social media platforms.</p>\n",
      "date_published": "2022-11-06T00:00:00Z"
    },{
      "id": "https://ndftz.com/posts/decompile-iconfonts/",
      "url": "https://ndftz.com/posts/decompile-iconfonts/",
      "title": "Get individual SVG&#39;s back from IconFonts",
      "content_html": "<p>In this tutorial I'm going to show you how to decompile a big bloated icon font into a series of small, neat, and portable SVG files.  It's dead easy.</p>\n<p>First install <a href=\"https://fontforge.org/\">Fontforge</a> on your system</p>\n<p>Fedora Linux</p>\n<pre><code>sudo dnf install fontforge\n</code></pre>\n<p>MacOS</p>\n<pre><code>brew install fontforge\n</code></pre>\n<p>Just change the package manager for your distribution:<br>\neg Debian/Ubuntu with <code>sudo apt install fontforge</code></p>\n<p>Now for the magic one liner, just copy and paste this in your terminal and replace <code>youriconfont.woff</code> with the path to your icon font file.</p>\n<pre><code>fontforge -lang=ff -c \\\\\n'Open($1); SelectWorthOutputting(); \\\\\nforeach Export(&quot;svg&quot;); endloop;' \\\\\nyouriconfont.woff\n</code></pre>\n<p>You'll now have a standalone SVG file for every glyph in your icon font. If you don't care about naming feel free to head to the <a href=\"#bonus-round\">bonus round</a></p>\n<h2 id=\"but-those-filenames%2C-they-suck-right%3F\">But those filenames, they suck right? <a class=\"direct-link\" href=\"#but-those-filenames%2C-they-suck-right%3F\">#</a></h2>\n<p>Because the font file knows nothing about what each shape is called, the filenames take the unicode value for each character represented like so you'd think you're stuck with filenames like :  <strong><code>uniE9AF_youriconfont.svg</code></strong></p>\n<p>Good news, your existing CSS should have something like this (but probably bigger):</p>\n<pre><code>.icon-pacman:before {\n  content: &quot;\\e916&quot;;\n} \n.icon-leaf:before {\n  content: &quot;\\e9a4&quot;;\n}\n.icon-airplane:before {\n  content: &quot;\\e9af&quot;;\n}\n</code></pre>\n<blockquote>\n<p>Yarr, thar be useful names'</p>\n</blockquote>\n<p>What I do is a bulk find and delete on the common CSS markup so that we're left with something like this:</p>\n<pre><code>icon-pacman,e916 \nicon-leaf,e9a4 \nicon-airplane,e9af \n</code></pre>\n<p>As my SED and AWK skills are terrible, I just opened that output as a CSV in a spreadsheet, converted the unicode column to uppercase (if you need to), flipped the columns order, and was left with new CSV output like this:</p>\n<pre><code>E916,icon-pacman \nE9A4,icon-leaf \nE9AF,icon-airplane \n</code></pre>\n<p>I dutifully do another 3 find and replace commands:</p>\n<p>replace first line with <code>mv uni</code></p>\n<p>replace all commas with <code>_youriconfont.svg   </code> (trailing space)</p>\n<p>replace linebreak with <code>.svg</code> followed by a line break</p>\n<p>The output now looks like this:</p>\n<pre><code>mv uniE916_youriconfont.svg pacman.svg \nmv uniE9A4F_youriconfont.svg leaf.svg\nmv uniE9AF_youriconfont.svg airplane.svg\n</code></pre>\n<p>I run that and rejoice</p>\n<p>This finally replaces all filenames with the sane names given to them by the CSS.</p>\n<p>I'm sure I can script this reconciliation part but I do like doing it manually as all CSS is crafted slightly differently so it's good to be eyes-on in case there is some rogue CSS to clean up.</p>\n<p>You probably only need to do this once.<br>\nIf you're doing this every day well... then you might be a competitor of my employer, so shoo shoo 👀</p>\n<h1 id=\"bonus-round\">Bonus round <a class=\"direct-link\" href=\"#bonus-round\">#</a></h1>\n<h3 id=\"install-svgo-on-your-system\">install SVGO on your system <a class=\"direct-link\" href=\"#install-svgo-on-your-system\">#</a></h3>\n<p>(I prefer to use NPM as it works on linux and mac hosts alike)</p>\n<pre><code>npm install -g svgo\n</code></pre>\n<p>Now you can simply enter the directory and run</p>\n<pre><code>svgo *.svg\n</code></pre>\n<p>That's it.</p>\n<p>Your files will have <code>fill=&quot;currentcolor&quot;</code> applied to them so when you inline the SVG inside markup they will adhere to your CSS <code>color:</code> value just like the good-ol days.</p>\n<h1 id=\"a-little-history\">A little history <a class=\"direct-link\" href=\"#a-little-history\">#</a></h1>\n<p>I'll cover why you would you ever need or want to do this. Icon Fonts were once an answer to easy web design.<br>\nThey exploded on the scene once <a href=\"https://caniuse.com/fontface\"><code>@fontface</code></a> was supported by major browsers.<br>\niconfonts gave us all the icons you could need within a single HTTP-request - which was great if you had a lightning fast CDN and agressive caching.  You used them usually with CSS pseudo elements and custom character ranges. That's where things get hairy for our a11y friends.</p>\n<p>Remember image sprites? Iconfonts as a technique came after image sprites for single-payload single-color icon sets. Before frameworks like react or powerful site generators it made sense to align your icons and marks with your typographic layout - browsers werent always so nice so this kept things on 'some' guardrails.<br>\nPlus services like <a href=\"https://icomoon.io\">IcoMoon</a> emerged which made creating custom icon sets easy.</p>\n<p>But of course like I mentioned the accessibility was terrible.<br>\nWorse, some text layout engines mutilated iconsfonts.  Think of the carnage the CSS <code>text-rendering: optimizeSpeed;</code>   would do to your illustrations.</p>\n<h3 id=\"we-now-live-in-the-future\">We now live in the future <a class=\"direct-link\" href=\"#we-now-live-in-the-future\">#</a></h3>\n<p>With the advent of modern frameworks and the popularity of best practices like <a href=\"https://css-tricks.com/accessible-svg-icons/\">ARIA atrributes</a>. Icon fonts just arent the most suitable technique anymore; not by a long shot.</p>\n<p>But much of the internet is still littered with websites and apps that depend on iconfonts.  And for those poor buggers, it's not without effort to climb into modern times.</p>\n<p>We see this often at <a href=\"http://outfit.io\">outfit.io</a> whenever we have a new client with only a website to ingest their existing brand assets from.</p>\n<p>Once we have the clean illustrations (that were often lost) back in a malleable and minimal format, our web developer counterparts can shed hundreds of kilobytes of frontend bottleneck from their sites and apps.</p>\n<p>I hope this helps you</p>\n",
      "date_published": "2022-01-26T00:00:00Z"
    },{
      "id": "https://ndftz.com/posts/open-fonts-2022/",
      "url": "https://ndftz.com/posts/open-fonts-2022/",
      "title": "Open Fonts in 2022",
      "content_html": "<ul>\n<li></li>\n</ul>\n<p>This weekend I was lucky enough to present at <a href=\"https://linux.conf.au\">https://linux.conf.au</a> with a little preparation help from living legend <a href=\"https://twitter.com/davelab6\">Dave Crossland</a> (thanks mate).</p>\n<p>I lightly touched on <a href=\"outfit.io/\">Outfit's</a> experience releasing <a href=\"https://outfit.io/outfit-font\">The Outfit Font</a> to the <a href=\"https://fonts.google.com/specimen/Outfit\">Google Fonts Library</a> and how incredibly mature the technical rigor and discipline around publishing an open source font has become.</p>\n<p>Sadly this was a virtual event but the good news is you can watch the recording below if keen:</p>\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/EcDJQ6ATCQk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>The slides contain handy details so here they are:</p>\n<iframe width=\"100%\" height=\"400\" src=\"https://slides.com/fitzy/fonts-lca2022/fullscreen\" style=\"border:none\"/>\n<h2 id=\"when-i-remember-something-it'll-go-here\">when I remember something it'll go here <a class=\"direct-link\" href=\"#when-i-remember-something-it'll-go-here\">#</a></h2>\n",
      "date_published": "2022-01-15T00:00:00Z"
    },{
      "id": "https://ndftz.com/posts/generative-design/",
      "url": "https://ndftz.com/posts/generative-design/",
      "title": "Generative art with vanilla JS",
      "content_html": "<p>Why design a single piece when you can design a visual system with countless unique permutations?</p>\n<p>In this tutorial I'm going to show you how to make dynamic artwork using very simple vanilla javascript and SVG.</p>\n<style>\n\n#nstage{cursor:pointer;}\n#nstage circle {stroke: DeepPink;fill: none;stroke-width:2;}\n#nstage circle:nth-child(2n) {stroke:#6ac; animation-delay:-1s; }\n#nstage circle:nth-child(3n){stroke:#789;  opacity:.5;animation-delay:-2s;}\n#nstage circle:nth-child(4n){stroke:#567;  opacity:.5;animation-delay:-3s;}\n#nstage circle:nth-child(5n){stroke:#9ab; animation-delay:-.5s;}\n#nstage circle{animation: showhide 4s ease infinite}\n@keyframes showhide{50%{opacity:0}}\n</style>\n<svg id=\"nstage\"  width=\"100%\"  height=\"27em\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid slice\" style=\"opacity:.8;position:absolute; top:-2em; left:0; right:0; z-index:-1;\">\n<circle cx=\"10\" cy=\"10\" r=\"5\" />\n<circle cx=\"20\" cy=\"90\" r=\"4\" />\n<circle cx=\"30\" cy=\"40\" r=\"3\" />\n<circle cx=\"40\" cy=\"30\" r=\"2\" />\n<circle cx=\"50\" cy=\"70\" r=\"1\" />\n<circle cx=\"60\" cy=\"60\" r=\"6\" />\n<circle cx=\"70\" cy=\"30\" r=\"7\" />\n<circle cx=\"80\" cy=\"80\" r=\"8\" />\n<circle cx=\"90\" cy=\"10\" r=\"9\" />\n</svg>\n<script>\nfunction eremoveAll() {\ndocument.getElementById(\"nstage\").innerHTML = \"\";\n}\neremoveAll();\nlet esvg = document.getElementById(\"nstage\");\nfunction edrawCircles() {\nfor (i = 0; i < 15; i++) {\ncircle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\ncircle.setAttribute(\"pathLength\", \"1\");\ncircle.setAttribute(\"stroke-width\", \"1\");\ncircle.setAttribute(\"r\", Math.floor(Math.random() * 7) * 2 + 2);\ncircle.setAttribute(\"cx\", Math.floor(Math.random() * 4) * 20 + 20);\ncircle.setAttribute(\"cy\", Math.floor(Math.random() * 4) * 20 + 20);\nesvg.appendChild(circle);\n}\n}\ndocument.addEventListener(\"click\", function () {\neremoveAll();\nedrawCircles();\n});\nedrawCircles();\nvar deGenTimer = window.setInterval(function () {\neremoveAll();\nedrawCircles();\n}, 1000);\n</script>\n<p>For generative art there are some great frameworks like <a href=\"https://p5js.org/\">P5.js</a>,<a href=\"https://threejs.org/\">Three.js</a>, all the way up to the mind bending <a href=\"https://en.wikipedia.org/wiki/Generative_adversarial_network\">Generative Adversarial Networks</a> like <a href=\"https://github.com/NVlabs/stylegan\">styleGAN</a> and so many more.  This space is exploding with digital artists and art directors chasing never seen before aesthetics that blur the lines between human and machine made creations.</p>\n<p>This isn't new either. For decades many brands with expansive portfolios have gone down the dynamic brand route with their visual architecture. We're lucky to have a few of them as customers at <a href=\"http://Outfit.io\">Outfit.io</a> . Traditionally however, permutations were created by central tooling. Often created on the desktop of an art director in a brand team. A render produced once per-need - manually looked over, then distributed as static assets. Nowadays, we can keep the systems alive by leveraging our web native technology and respond to new input</p>\n<p>One of the many benefits in using web formats for design, is that it's very easy to produce artwork that is unique every time. An awesome perk for end users of your visual system.<br>\nPlus, unlike choosing a specific tool, you have all the aesthetic potential of the web.</p>\n<p>This can make for a far more engaging and dynamic aesthetic on large builds like events or media.</p>\n<h2 id=\"setting-the-stage\">Setting the stage <a class=\"direct-link\" href=\"#setting-the-stage\">#</a></h2>\n<p>First, we're going to create something without any javascript at all.<br>\nThis helps us to creatively set the stage by mocking up at least some of the look and feel you'd like to create.</p>\n<p>The benefits of this approach means you discover your answers to the most beautiful of questions:</p>\n<blockquote>\n<p>What must <strong>stay the same</strong> so that<br>everything else can change?</p>\n</blockquote>\n<p>The answer is what frees us up to explore new horizons:</p>\n<blockquote>\n<p>With what is constant,<br>what can <strong>constantly change</strong>?</p>\n</blockquote>\n<p>If we get a sense of what we like, we'll also get a sense of what variables we can bend or break.</p>\n<p>In this case we're going to use <code>SVG</code>,  but you could just as easily use plain ol HTML and <code>div</code>'s.<br>\nI'm not going to use <code>canvas</code> or even Filters because at the end I want a nice vector PDF poster and not a heavy rasterized asset.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><br>  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stage<span class=\"token punctuation\">\"</span></span> <br>  <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 100 100<span class=\"token punctuation\">\"</span></span> <br>  <span class=\"token attr-name\">preserveAspectRatio</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xMidYMid slice<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- cool stuff will go here --></span><br> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>That <code>preserveAspectRatio=&quot;xMidYMid slice&quot;</code> will center-crop our artwork if we display it at non square. Think of it as <code>background-size: cover; background-position: 50% 50%;</code> but for SVG contents within a <code>viewBox</code></p>\n<p>We should probably add some CSS to make sure we're full page too.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span><span class=\"token punctuation\">{</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br><span class=\"token selector\">body > svg</span><span class=\"token punctuation\">{</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100vw<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100vh<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, lets think about what we could create.</p>\n<p>A few random-ishly placed circles might do the trick.</p>\n<svg viewBox=\"0 0 100 100\" fill=\"currentcolor\"  width=\"100%\" height=\"15em\">\n<circle cx=\"20\" cy=\"80\" r=\"4\" />\n<circle cx=\"80\" cy=\"40\" r=\"4\" />\n<circle cx=\"40\" cy=\"40\" r=\"2\" />\n<circle cx=\"40\" cy=\"80\" r=\"2\" />\n<circle cx=\"60\" cy=\"60\" r=\"6\" />\n<circle cx=\"60\" cy=\"20\" r=\"6\" />\n<circle cx=\"20\" cy=\"60\" r=\"8\" />\n<circle cx=\"80\" cy=\"20\" r=\"8\" />\n</svg>\n<p>Not really that random... I just placed the X and Y axis in increments of 20 and the radius in sizes between 2-8.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"what-must-stay-the-same-%3F\">What must stay the same ? <a class=\"direct-link\" href=\"#what-must-stay-the-same-%3F\">#</a></h2>\n<p>We're going to apply some CSS and attributes to lock in the look we want.  In this case, pink circles with double thick lines and no fill.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">circle</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span> DeepPink<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>   <br>  <span class=\"token property\">stroke-width</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><svg viewBox=\"0 0 100 100\" fill=\"currentcolor\" width=\"100%\"  height=\"15em\"> <g style=\"stroke: DeepPink;fill: none;stroke-width:2;\"><circle cx=\"20\" cy=\"80\" r=\"4\" /><circle cx=\"80\" cy=\"40\" r=\"4\" /><circle cx=\"40\" cy=\"40\" r=\"2\" /><circle cx=\"40\" cy=\"80\" r=\"2\" /><circle cx=\"60\" cy=\"60\" r=\"6\" /><circle cx=\"60\" cy=\"20\" r=\"6\" /><circle cx=\"20\" cy=\"60\" r=\"8\" /><circle cx=\"80\" cy=\"20\" r=\"8\" /></g></svg></p>\n<p>Okay that was fun, but we need more of these, and I'd go mad placing circles manually. Time to let the computers take over.</p>\n<h1 id=\"enter-vanilla-javascript\">Enter Vanilla Javascript <a class=\"direct-link\" href=\"#enter-vanilla-javascript\">#</a></h1>\n<p>For this demo, we be messing with the three attributes of each SVG <code>circle</code> element.</p>\n<ul>\n<li>the circle X position</li>\n<li>the circle Y position</li>\n<li>the radius of the circle</li>\n</ul>\n<p>I also want the option of changing how many circles we play with.</p>\n<p>So to accommodate this, we're going to say bye-bye to the manually crafted circles and hello to Javascript generated ones.</p>\n<p>I'm going to leave them in the DOM just incase someone is using <code>noscript</code>. But there's no need to do this if we were generating this server-side.<br>\nI also want a <code>removeAll</code> function for easily testing new variations.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// clearing the stage</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now we're going to create entirely new circles on the stage with a function called <code>drawCircles</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// calling my state svg</span><br><span class=\"token keyword\">let</span> svg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">drawCircles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// how many circles to draw </span><br>  <span class=\"token comment\">// I started with 8 but now I think 15 is the magic number</span><br>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <br>    <span class=\"token comment\">// because circle isnt a html element I need to specify the SVG namespace </span><br>    circle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.w3.org/2000/svg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>   <br>    <span class=\"token comment\">// maximum 14, minimum 2 and in increments of 2 </span><br>    circle<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">// minimum 20 maximum 80, incremements of 20 </span><br>    <span class=\"token comment\">// (so either 20 , 40, 60, 80 )</span><br>    circle<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cx\"</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    circle<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cy\"</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">// add these elements to my stage</span><br>    svg<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">drawCircles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mess with the values, it's super fun to see your design going off-plan.  Watching your rules bend and break can give you new ideas.</p>\n<h2 id=\"testing-and-regenerating\">Testing and regenerating <a class=\"direct-link\" href=\"#testing-and-regenerating\">#</a></h2>\n<p>We're going to make testing easy with a timer that changes permutation every 4 seconds.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reGenTimer <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token function\">drawCircles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Actually, I'm super impatient so we're also going to add a click event listener so that I can just click for a new generation.</p>\n<pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token function\">drawCircles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"css-for-some-more-flair\">CSS for some more flair <a class=\"direct-link\" href=\"#css-for-some-more-flair\">#</a></h2>\n<p>What's awesome about generating random elements is that you already have them in a random sequence.  So you can add very sequential CSS rules using the <code>:nth</code> selectors and still get away with looking random - no need to put this stuff in your JS.</p>\n<p>Below, I just make every 2nd, 3rd, 4th and 5th circle a different stroke color.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">circle:nth-child(2n)</span><span class=\"token punctuation\">{</span><span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span>#6ac<span class=\"token punctuation\">}</span><br><span class=\"token selector\">circle:nth-child(3n)</span><span class=\"token punctuation\">{</span><span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span>#678<span class=\"token punctuation\">}</span><br><span class=\"token selector\">circle:nth-child(4n)</span><span class=\"token punctuation\">{</span><span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span>#345<span class=\"token punctuation\">}</span><br><span class=\"token selector\">circle:nth-child(5n)</span><span class=\"token punctuation\">{</span><span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span>#9ab<span class=\"token punctuation\">}</span></code></pre>\n<p>Click below to refresh faster</p>\n<style>\n#stage{cursor:pointer;}\n#stage circle {stroke: DeepPink;fill: none;stroke-width:2;}\n#stage circle:nth-child(2n) {stroke:#6ac}\n#stage circle:nth-child(3n){stroke:#678}\n#stage circle:nth-child(4n){stroke:#345}\n#stage circle:nth-child(5n){stroke:#9ab}\n</style>\n<svg id=\"stage\"  width=\"100%\"  height=\"20em\" viewBox=\"0 0 100 100\" >\n<circle cx=\"10\" cy=\"10\" r=\"5\" />\n<circle cx=\"20\" cy=\"90\" r=\"4\" />\n<circle cx=\"30\" cy=\"40\" r=\"3\" />\n<circle cx=\"40\" cy=\"30\" r=\"2\" />\n<circle cx=\"50\" cy=\"70\" r=\"1\" />\n<circle cx=\"60\" cy=\"60\" r=\"6\" />\n<circle cx=\"70\" cy=\"30\" r=\"7\" />\n<circle cx=\"80\" cy=\"80\" r=\"8\" />\n<circle cx=\"90\" cy=\"10\" r=\"9\" />\n</svg>\n<script>\nfunction removeAll() {\ndocument.getElementById(\"stage\").innerHTML = \"\";\n}\nremoveAll();\nlet svg = document.getElementById(\"stage\");\nfunction drawCircles() {\nfor (i = 0; i < 15; i++) {\ncircle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\ncircle.setAttribute(\"pathLength\", \"1\");\ncircle.setAttribute(\"stroke-width\", \"1\");\ncircle.setAttribute(\"r\", Math.floor(Math.random() * 7) * 2 + 2);\ncircle.setAttribute(\"cx\", Math.floor(Math.random() * 4) * 20 + 20);\ncircle.setAttribute(\"cy\", Math.floor(Math.random() * 4) * 20 + 20);\nsvg.appendChild(circle);\n}\n}\ndocument.addEventListener(\"click\", function () {\nremoveAll();\ndrawCircles();\n});\ndrawCircles();\nvar reGenTimer = window.setInterval(function () {\nremoveAll();\ndrawCircles();\n}, 3000);\n</script>\n<p><a href=\"https://codepen.io/andyfitz/pen/KKaxgvw\" rel=\"noreferer\" target=\"_blank\">Play with it on Codepen</a></p>\n<p>And there you have it,  we've made generative artwork.<br>\nRandom but within constraints. Every iteration looks different but also like they belong together. The rules you set – and how wild you go, is entirely up to your vision.</p>\n<p>The whole dance of this technique is to ensure every permutation is a <em>hit</em>  and looks like something you'd be happy with. That's easier said than done when you can't push pixels, but trust me it's super rewarding knowing you have created a living system rather than a static piece.</p>\n<h2 id=\"what-about-that-poster%3F\">What about that poster? <a class=\"direct-link\" href=\"#what-about-that-poster%3F\">#</a></h2>\n<p>Remember I said we were going to make this a nice vector PDF poster?<br>\nThanks to <a href=\"http://Make.cm\">Make.cm</a> we can, and <a href=\"https://api.make.cm/make/t/ad146027-af14-4644-92e8-b13f1209bfda/k/17915c24-7159-4b2a-9552-a50f296fa3d6.c0e9241f95e4c5bbbf17b447538274b7/sync?size=A4&amp;format=pdf&amp;data%5Bempty%5D=nodata\">every single download</a> will be generated uniquely.</p>\n<p>Checkout the GET request below for an A3 version<br>\n<a style=\"padding:1em; margin: 1em 0;display:block; width: 100%;overflow:auto; \" class=\"button\" target=\"_new\" href=\"https://api.make.cm/make/t/ad146027-af14-4644-92e8-b13f1209bfda/k/17915c24-7159-4b2a-9552-a50f296fa3d6.c0e9241f95e4c5bbbf17b447538274b7/sync?size=A3&format=pdf&data[blank]=nodata\"> https://api.make.cm/make/t/ad146027-af14-4644-92e8-b13f1209bfda/k/17915c24-7159-4b2a-9552-a50f296fa3d6.c0e9241f95e4c5bbbf17b447538274b7/sync?size=A3&amp;format=pdf&amp;data[blank]=nodata </a></p>\n",
      "date_published": "2021-04-19T00:00:00Z"
    },{
      "id": "https://ndftz.com/posts/essential-svg-tools/",
      "url": "https://ndftz.com/posts/essential-svg-tools/",
      "title": "Essential SVG tools",
      "content_html": "<p><svg viewBox=\"-7 0 24 10\" style=\"height:15em; width:100%;background-color:#f87; fill:#fca\"> <path fill=\"#fff\" d=\"M-2.6 3H1.5V7H-2.6M8 7H13L10.5 3M5 3A2 2 0 105.001 3\" /></svg></p>\n<p>This article contains SVG tools I reach for depending on need.<br>\nAs the rifleman's creed goes: <em>“there are many like it but this one is mine”</em>.<br>\nI like this list.</p>\n<h2 id=\"preamble\">Preamble <a class=\"direct-link\" href=\"#preamble\">#</a></h2>\n<p>My affair with SVG began back when Adobe offered <a href=\"https://www.w3.org/TR/1998/NOTE-PGML\" target=\"_blank\"  rel=\"noreferrer\">PGML</a>. I loved flash, but figured open standards would win the browser wars . You can read about<a href=\"https://www.w3.org/Graphics/SVG/WG/wiki/Secret_Origin_of_SVG\" target=\"_blank\"  rel=\"noreferrer\"> SVG's origins</a> here.</p>\n<p>Once W3C released the SVG draft: I was convinced SVG would own the web and be supported by all major browsers within months (it took years). Nevertheless, my courtship began.</p>\n<p>Fortunately SVG was more useful than just internet use.<br>\nBy 2003, I had toyed with SVG in my studies.<br>\nBy 2005, I had finally used SVG commercially thanks to <a href=\"https://redhat.com\">Red Hat</a> (and UTF-8).</p>\n<p>SVG assists me in many tasks – from websites, to presentations, to apps, to toolchains.<br>\nHere's what I use today:  Some are online tools, some are scripts, some are desktop apps, some are libraries. All incredibly powerful (and/or fun) for the right situation.<br>\nSo here goes, get your bookmark tool of choice fired up:</p>\n<h2 id=\"svgomg\"><a href=\"https://jakearchibald.github.io/svgomg/\">SVGOMG</a> <a class=\"direct-link\" href=\"#svgomg\">#</a></h2>\n<p><a href=\"https://jakearchibald.github.io/svgomg/\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"svgomg\"><svg viewBox=\"0 0 600 600\" style=\"height:15em; width:100%;background-color:#0097A7;\"><path fill=\"#00BCD4\" d=\"M-2000-100H3131V395.68H-2000Z\"/><path d=\"M269.224 530.33L519 395.485H269.224V530.33zM214.35 91.847H519v303.638H214.35V91.847z\" opacity=\".22\"/><path fill=\"#FFF\" d=\"M80 341.735h189.224V530.33H80z\"/></svg></a></p>\n<p>The webinterface to SVGO is so handy, I also use SVGO directly in apps and on the commandline.  Everybody should have local access to it.</p>\n<pre><code>npm install -g svgo\n</code></pre>\n<p>If you use <a href=\"https://webpack.js.org/\">webpack</a>, <a href=\"https://wwwz.snowpack.dev/\">snowpack</a>, <a href=\"https://www.npmjs.com/package/vite-plugin-svg\">vite-svg-plugin</a> etc you likely use it too.<br>\nThe plugins are fascinating and have bailed me out many times.</p>\n<p>There's also <a href=\"https://github.com/RazrFalcon/svgcleaner\">SVG Cleaner</a> which has some compelling benefits over SVGO.</p>\n<h2 id=\"svg-path-editor\"><a href=\"https://yqnn.github.io/svg-path-editor/\">SVG Path Editor</a> <a class=\"direct-link\" href=\"#svg-path-editor\">#</a></h2>\n<p><a href=\"https://yqnn.github.io/svg-path-editor/\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"svg path editor\"><svg viewBox=\" -1-1 15 15\" style=\"height:15em; width:100%;background-color:#678; fill:#eee\">  <path d=\"M 4 8 L 10 1 L 13 0 L 12 3 L 5 9 C 6 10 6 11 7 10 C 7 11 8 12 7 12 A 1.42 1.42 0 0 1 6 13 A 5 5 0 0 0 4 10 Q 3.5 9.9 3.5 10.5 T 2 11.8 T 1.2 11 T 2.5 9.5 T 3 9 A 5 5 90 0 0 0 7 A 1.42 1.42 0 0 1 1 6 C 1 5 2 6 3 6 C 2 7 3 7 4 8 M 10 1 L 10 3 L 12 3 L 10.2 2.8 L 10 1\" /> </svg></a><br>\nI use this now more than even <a href=\"http://www.inkscape.org/\">Inkscape</a> for simple illustrations, and I really wish the preview would let me add my CSS. But still, this thing is pure GOLD!<br>\nWhen finishing an illustration I often return to this tool and go path by path to reduce unnessecary coordinates and operators. Stealing a few decimals here and there, replacing cubic bezier path operators with more optimal ones like quadratics or arcs.</p>\n<p>SVG path editor will dramatically improve your understanding of the SVG path system.<br>\nAlso try out this <a href=\"https://svg-path-visualizer.netlify.app/#M5%208.5l3-4c2-3-3-4-3-1%200-3-5-2-3%201z\">SVG path visualizer</a>  I put the heart from this article in it's URL param - very handy when teaching SVG.</p>\n<h2 id=\"svg-crop\"><a href=\"https://svgcrop.com/\">SVG Crop</a> <a class=\"direct-link\" href=\"#svg-crop\">#</a></h2>\n<p><a href=\"https://svgcrop.com/\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"svgcrop\"><svg viewBox=\"0 -1 10 12\" style=\"height:15em; width:100%;background-color:#123; stroke-width:.5; stroke:#e3e6e9; stroke-miterlimit:9\"><path fill=\"#7298a0\" d=\"M 5 1 a 4 4 0 1 0 0.001 0 \" /><path d=\"M 1 1 h 4 l -2 8z\" stroke=\"#123\" stroke-width=\"1\"/><path fill=\"#a43365\" d=\"M 1 1 h 4 l -2 8z\" /></svg></a></p>\n<p>Remove the extra margin from around your SVG content so the file is easy to work with.<br>\n<a href=\"http://SVGcrop.com\">SVGcrop.com</a> resizes the SVG artboard by changing the <code>viewBox=&quot;..</code> attribute<br>\nIt's not 100% bulletproof (invisible shapes like clippaths will affect the viewBox) but handy all the same.</p>\n<h2 id=\"svg-url-encoder\"><a href=\"https://yoksel.github.io/url-encoder/\">SVG URL Encoder</a> <a class=\"direct-link\" href=\"#svg-url-encoder\">#</a></h2>\n<p>Inline SVG into CSS - hey it's a gnarly technique but I still find myself throwing SVG into pseudo elements all the time. Think of the saved HTTP request!<br>\nThis tool from Yoksel makes it super easy!</p>\n<h2 id=\"relative-clip-path\"><a href=\"https://yoksel.github.io/relative-clip-path/\">Relative clip-path </a> <a class=\"direct-link\" href=\"#relative-clip-path\">#</a></h2>\n<p>For turning SVG paths into CSS-friendly <code>clip-path</code> coordinates. Super handy.</p>\n<h2 id=\"svg-fitler-builder\"><a href=\"https://svgfilters.com/\">SVG Fitler Builder</a> <a class=\"direct-link\" href=\"#svg-fitler-builder\">#</a></h2>\n<p><a href=\"https://svgfilters.com/\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"svgfilters\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"height:15em; width:100%;background-color:#4b5ca3;\" viewBox=\"0 -10 119.9 164.8\" ><path fill=\"#6795e9\" d=\"M75.2 79.3a22.9 22.9 0 0043.5 0zm-3.7 23.8a23.1 23.1 0 00-26.9 3.2c-7.2 7-8.1 18-3.6 26.8z\"/><path fill=\"#41bfd0\" d=\"m97.5 50c-4.9 0-10 1.6-13 4.3a1.6 1.6 0 00-.2 0a23.8 23.8 0 00-2 1.6c-5.7 4.3-23.6 13.7-46-1l-1.8-1.3a22.4 22.4 0 10.5 37.3a22.3 22.3 0 002.5-1.9c12.2-9.5 23-9 23-9h40.6c5.8 0 11.7 3 11.7 8.7a22.4 22.4 0 00-15.3-38.7zm-22.1 30c-.7 10.5-9.6 20.7-9.6 20.7l-13.5 20.2c-3.4 4.8-9 8-13.8 4.7c3 20 28.9 26 40.5 9.5c2.8-4 4.4-9.2 3.8-13.2l.1-.2-.1-2.5c-.3-6.8 1.2-19.3 18.2-24.5a22.9 22.9 0 01-25.5-14.7zm37.4 8.6zzzm-52.8-88.6a23 23 0 10.001 0\"/></svg></a><br>\nCreating complex SVG Filters is incredibly hard, Thankfully we have this brilliant tool.<br>\nThere's an alternative <a href=\"https://yoksel.github.io/svg-filters/#/\">SVG Filter Constructor</a> by <a href=\"https://yoksel.github.io\">Yoksel</a> with a less intimidating interface that's worth a look.<br>\nActually <a href=\"https://boxy-svg.com/app\">Boxy SVG editor</a> has a great compositing editor which is easy to use too.</p>\n<h2 id=\"svg-gradient-map-builder\"><a href=\"https://yoksel.github.io/svg-gradient-map/#/\">SVG Gradient Map Builder</a> <a class=\"direct-link\" href=\"#svg-gradient-map-builder\">#</a></h2>\n<p>Who doesn't love Duotone effects?  SVG Gradient Map filters make them achievable native on the web.<br>\nThere's just one annoying catch.  when you are coding these you need to convert your R G and B into separate channels and divide by 255 then place them your R G and B numbers for different colours next to eachother - it feels kind of unnatural.<br>\nThis tool makes creating a custom filter easy.</p>\n<p>If you want to automate this, I also <a href=\"https://codepen.io/andyfitz/pen/KKagbqe\">wrote a CodePen</a> that converts any array into swatches and a duotone effect.</p>\n<h2 id=\"inkscape\"><a href=\"https://inkscape.org/\">Inkscape</a> <a class=\"direct-link\" href=\"#inkscape\">#</a></h2>\n<p><a href=\"https://inkscape.org\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"inkscape\"><svg viewBox=\" 0 0 100 100\" style=\"height:15em; width:100%;background-color:#e2e6e9; fill:var(--dark)\"><path d=\"M 40.8 7 L 7.2 41.3 C -5 55.2 14.9 53.7 23.1 57.8 C 27.3 59.8 12 63 15 66 C 18 69 32 71 35.6 75 C 39 78 29.5 81 32.4 83.9 C 35.4 86.9 42.1 84.1 43.4 91 C 44.3 96 55.6 93.2 61.1 89.1 C 64.1 86.1 55.5 86.4 58.5 83.4 C 65.8 75.9 72.5 80.7 75 73.2 C 76.3 69.5 63 67 67 64.5 C 75.7 59.5 105 56.6 91 42.5 L 56.2 7 Q 48.5 -1 40.8 7 Z M 79.4 73 C 78.8 75 91.9 76 91.9 72.8 C 90.1 67.6 81 68 79.4 73 Z M 32 78 Q 26 75 23 78 T 24 83 T 32 78 M 77.8 76.7 C 74 80.1 78 83.8 82 81.4 C 83 80.6 82 77.6 77.8 76.7 Z M 32.8 59.7 Q 41 62 50.5 63.4 C 52 63.6 51 65.2 49.3 65.6 C 45.7 66.6 28.3 59.6 32.8 59.7 Z M 54.1 9.4 L 67.3 22.9 Q 69.6 25.3 68 27.4 L 61.4 22 L 60 30 L 54.5 27 L 45.6 32.6 L 42.6 21 L 38 29 H 30.7 Q 23.9 29 30.1 22.6 L 43.1 9.4 Q 48.4 3.5 54.1 9.4 Z\" /></svg></a></p>\n<p>Isn't the evolution of open source desktop applications awesome?<br>\n<a href=\"https://wiki.inkscape.org/wiki/index.php/InkscapeHistory\">Gill &gt; Sodipodi &gt; Inkscape</a><br>\nI've loved this journey and especially love where it is now.<br>\nRun it on your linux machine, your mac .. its brilliant for creative exploration, and especially illustration.<br>\nI've used Inkscape since it's inception. Demoed it around the planet and pleaded for top designers to consider it. I could go on and on but let me just say it's <strong>the very best tool for illustration of complex paths</strong>. and leave the rest up to your imagination.</p>\n<h2 id=\"penpot\"><a href=\"https://penpot.app/\">Penpot</a> <a class=\"direct-link\" href=\"#penpot\">#</a></h2>\n<p><a href=\"https://penpot.app/\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"penpot\"><svg viewBox=\"0 -1 10 12\" style=\"height:15em; width:100%;background-color:#83f5d4; fill:none; stroke-width:.4; stroke:var(--dark)\"><path d=\"M2.3 3.4V1.6L3.2.3l.9 1.3V2L5 .7 5.9 2v-.4L6.8.3l.9 1.3v1.8M5 4.8v5M2.3 2.5l-.9.5v5L5 9.8 8.6 8V3l-.9-.5M1.4 3L5 4.8 8.6 3M4.1 2v2.3M5.9 2v2.3M2.9.8h.6m1.2.4h.6M6.5.8h.6\"/><path stroke-width=\".3\" d=\"M2.3 1.8h1.8m0 .4h1.8m0-.4h1.8m-4.5 0v2M5 2.2v2.6m1.8-3v2.1\"/></svg></a><br>\nEarly days to call this a Figma killer - But I do find it does most of what I want out of Figma (for free and freedom). Super impressed and excited to see where this project goes.</p>\n<h2 id=\"rawgraphs\"><a href=\"https://app.rawgraphs.io/\">RawGraphs </a> <a class=\"direct-link\" href=\"#rawgraphs\">#</a></h2>\n<p><a href=\"https://app.rawgraphs.io\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"rawgraphs\"><svg viewBox=\"0 0 14 5\" style=\"height:15em;width:100%;background-color:#f2f6fa; font-family:Work Sans, sans-serif; font-weight:300;\" fill=\"#0dc4a3\" ><text font-size=\"2\" x=\"7\" y=\"3\" text-anchor=\"middle\" dominant-baseline=\"middle\"><tspan fill=\"#3e3e41\" font-weight=\"900\">RAW</tspan>Graphs</text></svg></a><br>\nBrilliant way to pre-render beautiful data graphics, create the layout in rawgraphs then style with your own CSS.</p>\n<h2 id=\"boxy-editor\"><a href=\"https://boxy-svg.com/app\">Boxy Editor</a> <a class=\"direct-link\" href=\"#boxy-editor\">#</a></h2>\n<p><a href=\"https://boxy-svg.com/app\" target=\"_blank\" rel=\"noreferrer\" aria-label=\"boxysvg\"><svg viewBox=\"0 0 1024 1024\" style=\"height:15em;width:100%;background-color:hsla(211, 86%, 57%, 1.00);\"><path fill=\"#de6547\" d=\"M132.4 732V291.5l202.9 117.9v205L132.4 732z\"/><path fill=\"#fdbc4d\" d=\"M513 952.7V722.4L335.2 614.5 132.4 732 513 952.7z\"/><path fill=\"#69b356\" d=\"M891.6 732V291.5L688.7 409.4v205L891.6 732z\"/><path fill=\"#d1e993\" d=\"M513 952.7V722.4l175.7-107.9L891.6 732 513 952.7z\"/><path fill=\"#80b7fa\" d=\"M513 71.3v230.3L335.2 409.5 132.4 292 513 71.3z\"/><path fill=\"#4581e1\" d=\"M513 71.3v230.3l175.7 107.9L891.6 292 513 71.3z\"/><g><path fill=\"#fff\" stroke=\"#2f2f2f\" stroke-width=\"66.880944\" d=\"M585 542.3h90.2a43.6 43.6 0 100-60.5H585l63.8-63.8h.8a43.6 43.6 0 10-43.6-43.6v.8L542.3 439v-90.2a43.5 43.5 0 10-60.5 0V439L418 375.2v-.8a43.6 43.6 0 10-43.6 43.6h.8l63.8 63.8h-90.2a43.6 43.6 0 100 60.5H439L375.2 606h-.8a43.6 43.6 0 1043.6 43.6v-.8l63.7-63.8v90.2a43.5 43.5 0 0030.3 75 43.6 43.6 0 0030.3-75V585l63.7 63.8v.8a43.6 43.6 0 1043.6-43.6h-.8z\" paint-order=\"stroke\"/></g></svg></a><br>\nAt first sight, boxy looks like yet another svg-edit clone. But open up the panels and start editing (start using the i and o keys) and you'll see why it's fantastic for small projects.</p>\n<h2 id=\"excalidraw\"><a href=\"https://excalidraw.com/\">Excalidraw</a> <a class=\"direct-link\" href=\"#excalidraw\">#</a></h2>\n<p><a href=\"https://excalidraw.com/\" target=\"_blank\"  rel=\"noreferrer\" aria-label=\"excalidraw\"> <svg viewBox=\"0 -20 109 309\" style=\"height:15em;width:100%;color:#111;background-color:#f5f5f5\" ><path d=\"M39 5a471 471 0 00-28 24l-7 7 2 9 2 21a214 214 0 003 13c0 1 0 2-2 2c-1 0-2 0 4 16l4 13h1l2-1c-1-1 0-2 1-2a285 285 0 01-11-59c0-10 0-10 3-15c4-5 12-12 25-21l8-7c2-2 2-1 15 12l18 18 5 3-4 8a1681 1681 0 01-18 36c-17 32-13 29-33 29l-12 1-5 4c-4 5-5 7-2 10a8 8 0 011 5c0 1 1 2 5 2l5 1 1 13v14l-7 14C4 199 0 210 0 214l1 3 42-85a19461 19461 0 0145-95c0-1-6-8-17-18A682 682 0 0151 2c-2-3-6-2-12 3zm4 115c-5 9-5 9-18 9c-11 1-11 1-11-1a8 8 0 00-1-4c-1-1 0-2 1-5l2-3h10a125 125 0 0019-1l-2 5zm-9 16-4 9c-3 6-3 6-4 4l-1-9c0-7 0-7 8-8h3l-2 4zM42 29c-2 1-2 2-2 5c0 4 0 5 3 6s3 1 7-1c4-3 4-4 1-8s-5-5-9-2zm6 3c2 3 1 5-2 5s-4-3-3-5c1-3 4-2 5 0zm57 19-1 1-4 6a1334 1334 0 01-46 85l-1 5a1465 1465 0 01-33 70a41 41 0 00-4 11c-1 4 0 4 8 12l15 12c12 12 18 16 20 16c2-1 39-39 39-42l-4-33a981 981 0 01-9-86a681 681 0 0122-58l-2 1zm-23 75 5 37a5401 5401 0 008 59c0 4 0 5-7 12a349 349 0 01-27 28l-4 3-19-18c-18-17-20-18-19-20l12-21 16-30a94 94 0 017-13l1 32c-1 32 0 32 3 31v-72l11-21a360 360 0 0111-20l2 13z\"/></svg></a><br>\nDraw freehand-looking whiteboard sketchnotes.</p>\n<p>Excalidraw is amazing, not only as a simple tool for taking sketchnotes but also for the technology under the hood.<br>\nCheckout the <a href=\"https://perfect-freehand-example.vercel.app/\">amazing freehand tool by itself</a><br>\nAnd if you think that was impressive, check out what else the author <a href=\"https://twitter.com/steveruizok\">Steve Ruiz</a> tinkers with at <a href=\"https://www.globs.design/\">https://www.globs.design/</a></p>\n<h2 id=\"librsvg\"><a href=\"https://gitlab.gnome.org/GNOME/librsvg\">librSVG</a> <a class=\"direct-link\" href=\"#librsvg\">#</a></h2>\n<p><a href=\"https://gitlab.gnome.org/GNOME/librsvg\" target=\"_blank\" rel=\"noreferrer\"  aria-label=\"librsvg\"><svg viewBox=\"0 0 10 10\" style=\"stroke-linecap:round;height:15em;width:100%;background-color:#555\" fill=\"none\" stroke=\"#eee\" stroke-width=\".4\"><path d=\"M2 4A1 1 0 102.001 4M7 1A1 1 0 107.001 1M2 5 7 7V2M5.5 6.9 7 8.4 8.5 6.9 7 5.4Z\"/></svg></a></p>\n<p>This is a blazingly fast library to work with SVG files (used in ImageMagick and heaps more). If you are a performance-driven developer, <a href=\"https://gitlab.gnome.org/GNOME/librsvg/-/blob/master/src/bin/rsvg-convert.rs\">RSVG convert</a> in particular will blow your mind. Also you should follow <a href=\"https://people.gnome.org/~federico/blog/tag/librsvg.html\">Federico Mena-Quintero</a> Who is dragging RSVG into the future with Rust.</p>\n<p>Worthy mention goes to <a href=\"https://github.com/RazrFalcon/resvg\">reSVG</a> which is a super performant and powerful alternative to rSVG.</p>\n<h2 id=\"imagetracer-js\"><a href=\"https://github.com/jankovicsandras/imagetracerjs\">Imagetracer JS</a> <a class=\"direct-link\" href=\"#imagetracer-js\">#</a></h2>\n<p>There are many bitmap to vector tracers like <a href=\"http://potrace.sourceforge.net/\">potrace</a>, autotrace etc. Imagetracer is the most promising for web developers and has a few tricks up it's sleeve.<br>\nHandy to have on the CLI too:</p>\n<pre><code>imagetracerjs/nodecli&gt;node nodecli ../in.png outfilename out.svg scale 10\n</code></pre>\n<h2 id=\"2geom\"><a href=\"https://gitlab.com/inkscape/lib2geom\">2geom</a> <a class=\"direct-link\" href=\"#2geom\">#</a></h2>\n<p><a href=\"https://gitlab.com/inkscape/lib2geom\" target=\"_blank\"  rel=\"noreferrer\" aria-label=\"lib2geom\"><svg viewBox=\"0 0 10 10\" style=\"height:15em;width:100%;background-color:#eee\" fill=\"none\" stroke=\"#222\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#4e9a06\" d=\"M 0.8 3 C 1.8 2 3.8 2 3.8 4 C 3.8 6 0.8 5.4 0.8 7 H 3.8\"/><path d=\"M 5.4 9 C 10.1 9 5.6 2.8 9 2 M 6.25 7 a 1.4 1.4 0 1 1 0.01 0 z\" /></svg></a><br>\nIf you're building an app that needs to perform fast and accurate 2d computational geometry (boolean operations and way way more) you'll end up grateful for <a href=\"http://njhurst.com/\">Nathan Hurst</a> and all other contributors who made lib2geom possible.<br>\nFun fact, Inkscape uses 2geom under the hood and also powers the amazing live path effects etc.</p>\n<h2 id=\"single-purpose-svg-generator-tools\">Single-purpose SVG generator tools <a class=\"direct-link\" href=\"#single-purpose-svg-generator-tools\">#</a></h2>\n<p><svg  viewBox=\"0 0 72 72\" style=\"height:15em;width:100%;background-color:#e2e6e9; font-family:Work Sans, system-ui, sans-serif; font-weight:300;\" ><path fill=\"#f93\" d=\"M14 50C7 36 25 6 42 5s32 27 22 42c-9 15-43 17-50 3z\"/><path fill=\"#f06\" d=\"M40 36c6 6 15 11 16 16-2 15-25 17-35 11C9 55 1 37 8 25c4-6 13-10 19-7 5 3 8 11 13 18\"/> <text font-size=\"55\" x=\"36\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\" fill=\"#fff\" font-weight=\"900\">B</text></svg><br>\n<a href=\"https://www.blobmaker.app/\">Blob Maker</a> and <a href=\"https://getwaves.io/\">Wave Maker</a> - both part of the super cool <a href=\"https://app.haikei.app/\">haikei app</a><br>\n<a href=\"https://codepen.io/georgedoescode/full/dyNVNjG\">Noise maker</a> nice patterns of directional lines or dots<br>\n<a href=\"https://yoksel.github.io/wave-maker/\">Arc Wave Maker</a> nifty example of repeating arc paths<br>\n<a href=\"https://www.misha.studio/snowflaker/\">Snowflakes</a> Random snowflakes<br>\n<a href=\"https://yoksel.github.io/snowflake/\">Snowflake Painter</a> Design a snowflake with lines</p>\n<!-- \n## [Create.Rip](https://create.rip)\n\nEasily convert design files to web ready formats then extract individul elements. \nAccepts most traditional formats (PDF AI PSD TIFF etc) .\n\nI'd be remiss for not including this one.\n\nhttps://create.rip is a web service we built at Outfit for ourselves with the help of [embersea](http://www.embersea.io/) and [devaway](https://devaway.io/)\n\nWe decided to host and share it with the world -\n\nDedicated in memory to Ihor Novikov author of the Uniconvertor and Sk1 who passed March 15th, 2021 hospitalised by a stroke and subsequently COVID-19 -->\n<h2 id=\"what-else%3F\">What else? <a class=\"direct-link\" href=\"#what-else%3F\">#</a></h2>\n<p>Well there's lots of nifty things I havent personally climbed into.</p>\n<p><a href=\"https://github.com/gliffy/canvas2svg\">Canvas2SVG </a> - I have a feeling I'll get to know this library well someday.<br>\n<a href=\"https://xmlgraphics.apache.org/batik/\">Apache Batik</a>  - I used it quite a bit in the early days but it never took root in my toolchain.<br>\n<a href=\"https://svgjs.com/docs/3.0/\">SVGJS</a> It offers compelling shortcuts, I'm just a fan of vanilla JS. This also goes for <a href=\"http://snapsvg.io/\">SNAP SVG</a></p>\n<h1 id=\"thank-you-svg\">Thank you SVG <a class=\"direct-link\" href=\"#thank-you-svg\">#</a></h1>\n<p><svg viewBox=\"0 0 10 10\" style=\"height:15em; width:100%;background-color:#f87; fill:#fff\" stroke=\"#fca\" paint-order=\"stroke\" stroke-width=\"2\" stroke-linejoin=\"round\"><path d=\"M5 8.5l3-4c2-3-3-4-3-1 0-3-5-2-3 1z\" /> </svg></p>\n<p>So there you have it, the best tools to help you with SVG.<br>\nBy the way, all the images in this article were super-tiny inlined SVG - open web inspector and see for yourself.</p>\n<p>On a personal note:<br>\nThere are heroes I'd like to recognise; friends who moved SVG forward directly or indirectly - at least in my universe:<br>\n<a href=\"https://mcc.id.au/\">Cam Mcormack</a>, <a href=\"https://raphlinus.github.io/\">Raph Levien</a>, <a href=\"https://svgees.us/\">Chris Lilley</a>, <a href=\"https://cworth.org/\">Carl Worth</a>, <a href=\"https://www.w3.org/People/Quin/\">Liam Quinn</a>, <a href=\"http://njhurst.com/\">Nathan Hurst</a>, Peter Moulder, <a href=\"http://tavmjong.free.fr/\">Tavmjong Bah</a>, <a href=\"https://twitter.com/bryceharrington\">Bryce Harrington</a>, <a href=\"https://www.ekips.org/\">Aaron Spike</a>, Jon Cruz, Bulia Byak, <a href=\"https://gould.cx/ted/\">Ted Gould</a>, <a href=\"http://schepers.cc/\">Doug Schepers</a>, <a href=\"https://twitter.com/domlachowicz\">Dom Lachowicz</a>, <a href=\"https://twitter.com/dodjiseketeli\">Dodji Seketeli</a>, <a href=\"https://blog.fishsoup.net/\">Owen Taylor</a> and so many more.</p>\n<style>article svg{border-radius: 1em;} article a svg > *{transition: transform .25s ease; transform-origin:50% 50%; transform:scale(.95)}article a:hover svg > *{transition: transform .35s cubic-bezier(.4,.2,.1,1); transform-origin:50% 50%;transform:Scale(1)}</style>",
      "date_published": "2021-04-15T00:00:00Z"
    },{
      "id": "https://ndftz.com/posts/small-svg/",
      "url": "https://ndftz.com/posts/small-svg/",
      "title": "The smallest SVG possible",
      "content_html": "<p>How would you make my site favicon from a bitmap into an SVG? <em>(don’t cheat with web inspector)</em></p>\n<p><svg  viewBox=\".5 .5 3 4\" fill=\"none\" stroke=\"lightseagreen\" stroke-linecap=\"round\" style=\"width:100%; height:10em; background-color: var(--bg-2)\"><path d=\"M1 4h-.001V1h2v.001M1 2.6h1v.001\"/></svg></p>\n<p>The lazy me would just software trace using my favourite illustration tool. (<a href=\"https://inkscape.org\">Inkscape</a>)<br>\n<img src=\"/img/small-svg/f.webp\" alt=\"inkscape with an autotraced shape\" /></p>\n<p>But yuck, look at those node coordinates, and the shape is kind of melted when you look up close.</p>\n<p>In better news, the resulting filesize is an affordable <strong>2kb</strong>, much smaller than a decent resolution png or jpeg – but files over two thousand bytes are rookie numbers!<br>\nWe're a long way from optimal SVG sizes.</p>\n<p>So maybe we should roll up our sleeves and manually redraw it with the pen tool — being careful about where to place nodes, and when to use straight lines vs beziers.</p>\n<img src=\"/img/small-svg/f-manual.png\" alt=\"manually placed cubic beziers\"  />\n<p>Woohoo we're now at <strong>800 bytes</strong> - less than half the original size.</p>\n<p>At this point, I'd urge you to go one step further and optimise with <a href=\"https://github.com/svg/svgo\">SVGO</a> or manually with <a href=\"https://jakearchibald.github.io/svgomg/\">SVGOMG</a> — being sure not to melt the shape with precision settings.</p>\n<img src=\"/img/small-svg/f-omg.png\" alt=\"SVGO optimising an SVG file\" />\n<p>Wow, that worked great — We're now at around <strong>236 bytes</strong> which is excellent.  The shape is even closer to the original than tracing. This is usually as good as it gets, an 88% reduction from automatic tracing. IMO this was worth the effort.</p>\n<h2 id=\"what-if-we-went-deeper%3F\">What if we went deeper? <a class=\"direct-link\" href=\"#what-if-we-went-deeper%3F\">#</a></h2>\n<p>I managed to get the image down to <strong>127 bytes</strong>, 46% smaller than our best 236 byte image. All with full-fidelity by using a <code>stroke-linecap:round</code> hack.<br>\nHere's the full SVG:</p>\n<pre class=\"language-svg\"><code class=\"language-svg\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <br><span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.5 .5 3 4<span class=\"token punctuation\">\"</span></span> <br><span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <br><span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#20b2a<span class=\"token punctuation\">\"</span></span> <br><span class=\"token attr-name\">stroke-linecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><br>M1 4h-.001<br>V1h2v.001<br>M1 2.6<br>h1v.001<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>First I stroke the lines so I save on doubling coordnates, then I exploit the <code>v</code>and <code>h</code> relative operators at tiny offsets.</p>\n<p>See the values with <code>h.001</code> and <code>v.001</code> and <code>h-.001</code>  ?<br>\nThat's how I hacked the directional rounded corners.</p>\n<p>Normally <code>stroke-linecap:round</code> is just round. Nothing you can do about it.<br>\nBut when you change direction <em>REALLY</em> close to the edge coordinate, the cusp squares off on one side only, and you can control which side with negative or positive relative values.</p>\n<p>Neat huh? We're just getting started...</p>\n<h1 id=\"the-outfit-logo\">The Outfit logo <a class=\"direct-link\" href=\"#the-outfit-logo\">#</a></h1>\n<p>A while back, I created this interactive demo of the Outfit logo to teach some of the fundamentals of plotting and styling SVG path coordinates.  There's no fill here.</p>\n<p class=\"codepen\" data-height=\"470\" data-theme-id=\"1777\" data-default-tab=\"result\" data-user=\"andyfitz\" data-slug-hash=\"gOwzMwV\" style=\"height:470px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; margin: 1em 0; padding: 1em;\" data-pen-title=\"Outfit Logo Inspector\"> <span>See the Pen <a href=\"https://codepen.io/andyfitz/pen/gOwzMwV\">  Outfit Logo Inspector</a> by Andy Fitzsimon (<a href=\"https://codepen.io/andyfitz\">@andyfitz</a>)   on <a href=\"https://codepen.io\">CodePen</a>.</span></p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script><style>@media(max-width:70em){.cp_embed_wrapper iframe{height: 46em !important;}}</style>\n<h2 id=\"history-of-the-mark\">History of the mark <a class=\"direct-link\" href=\"#history-of-the-mark\">#</a></h2>\n<p><a target=\"_blank\" href=\"https://rowanhogan.com/\" rel=\"noreferrer\">Rowan Hogan</a> originally designed the Outfit logo. No doubt without regard specifically for SVG format optimisation. Don’t let the medium become the message as they say.</p>\n<p>The design evolved with minor optical updates and when it came time to make this demo, it had optimisation amenities stacked against it:</p>\n<ul>\n<li>An optical overshoot (round coords non-exact to a grid)</li>\n<li>Non-perfect curves (the f and the u are bent differently)</li>\n<li>Non 1:1 grid rhythm (1:1.3 spacing of stems)</li>\n</ul>\n<p>Thankfully the solution above is full-fidelity to the intended mark.</p>\n<p>It got even smaller as a one-liner:  <strong>253 bytes</strong>, styled and uncompressed (not bad for so many letters)</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 19 8.5<span class=\"token punctuation\">\"</span></span> <br><span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#e40046<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.36<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6.12<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.68<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M5.35 4<br>v2.5A1.02 1 0 008 6.5v-2h10.68<br>M10.2 8.2v-6<br>m2.3 6V2a1.3 1.2 10 012-1<br>m.3 7.2V4.5<br>m2.3 3.7v-6<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M14.8 2.8v0<span class=\"token punctuation\">\"</span></span><br><span class=\"token attr-name\">stroke-linecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"rules-to-svg-by\">Rules to SVG by <a class=\"direct-link\" href=\"#rules-to-svg-by\">#</a></h1>\n<p>This list is by no means comperehensive but it does serve as a rough guide</p>\n<h2 id=\"small-artboards\">Small Artboards <a class=\"direct-link\" href=\"#small-artboards\">#</a></h2>\n<p>Ensure coodinate precision by keeping your <code>viewBox</code> under 10 or 100 - from zero</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 10 10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">></span></span>   </code></pre>\n<p>It makes sense to factor up by 10 for more intricate shapes.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 100 100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">></span></span>   <br></code></pre>\n<p>Both scales work depending on the complexity of your image. The point here is we dont want every coordinate to be in the thousands, we also want to avoid unnessecary decimal coordinates. Every byte counts.<br>\nIf every coordinate has a decimal place, go up by 10. If only a few do, try to round up.</p>\n<h2 id=\"stroke-if-you-can\">Stroke if you can <a class=\"direct-link\" href=\"#stroke-if-you-can\">#</a></h2>\n<p>Every shape you can pull off as a stroke that would otherwise be a filled path saves you 2-3x bloat in coordinate. This is fairly easy to visualise as a stroke only has an inner line that can be expanded wheras a filled shape has two outer lines to create a zone.</p>\n<p>When you combine the right sized <code>viewBox</code> and stroked path, you wont even have to set <code>stroke-width</code> as it defaults to 1 viewBox unit.</p>\n<h2 id=\"know-when-to-capital-or-lowercase-path-coordinates\">Know when to capital or lowercase path coordinates <a class=\"direct-link\" href=\"#know-when-to-capital-or-lowercase-path-coordinates\">#</a></h2>\n<p>Don't know the difference?<br>\nUppercase Letters like <code>M</code> <code>C</code> <code>L</code>  <code>A</code> <code>H</code> <code>V</code> <code>Q</code> <code>T</code> etc all start an operation relative to the viewBox<br>\nLowercase letters (same as above) <code>m</code> <code>c</code> <code>l</code> <code>a</code> <code>h</code> <code>v</code> <code>q</code> <code>t</code> etc start from the last coordinate you did</p>\n<p>Relative or absolute positioned coordinates make a huge difference. Sometimes optimisation tools like SVGO can select which one is best, but not always.</p>\n<h2 id=\"chose-your-operator-wisely\">Chose your operator wisely <a class=\"direct-link\" href=\"#chose-your-operator-wisely\">#</a></h2>\n<p>Using a horizontal <code>H</code> or vertical <code>V</code> operator is great because you only need one coodinate it saves you tryping both X and Y,  you only need one coordinate so that halves what would otherwise be redundant axis data with the line-to <code>L</code> operator.</p>\n<p>Arc paths, quadratics and cubic splines all have their own benefits and problems.</p>\n<h2 id=\"dirty-path-tricks\">Dirty Path Tricks <a class=\"direct-link\" href=\"#dirty-path-tricks\">#</a></h2>\n<h3 id=\"circle-with-single-arc-operators\">Circle with single arc operators <a class=\"direct-link\" href=\"#circle-with-single-arc-operators\">#</a></h3>\n<p>You can draw 'pretty much' a perfect circle with a single SVG path arc operator.</p>\n<p>If you're already working in a <code>path d=&quot;&quot; </code> element, there's no need for a new element.<br>\nThis saves you 10 bytes per circle in that context. So we can do:</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">M5 0a5 5 0 10.001 0</code></pre>\n<p>vs having to go create a new element which could get messy for your CSS</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span> </code></pre>\n<h3 id=\"dots-with-stroke-linecap%3D%22round%22\">Dots with stroke-linecap=&quot;round&quot; <a class=\"direct-link\" href=\"#dots-with-stroke-linecap%3D%22round%22\">#</a></h3>\n<p>if you're doing a line icon with linecap-round you can make a dot the exact width of your stroke just by doing a very short relative horizontal or vertical line</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M 5 5 h.001<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-linecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n",
      "date_published": "2021-04-11T00:00:00Z"
    }
  ]
}
